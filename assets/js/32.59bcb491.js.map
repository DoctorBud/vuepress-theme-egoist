{"version":3,"sources":["webpack:///source/_posts/how-to-undo-with-git.md","webpack:///./source/_posts/how-to-undo-with-git.md?55bb","webpack:///./source/_posts/how-to-undo-with-git.md","webpack:///./source/_posts/how-to-undo-with-git.md?64b7"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AAAA;AAAA,G;;;;;;;;;;;;;;ACtDA;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,gtCAAgtC,OAAO,0HAA0H,qGAAqG,OAAO,gFAAgF;AAC7oD,oCAAoC,aAAa,0BAA0B,wBAAwB,qIAAqI,cAAc,aAAa,0BAA0B,wBAAwB,6FAA6F,cAAc,aAAa,0BAA0B,wBAAwB,gBAAgB,OAAO,mBAAmB,UAAU,mCAAmC,2CAA2C,gEAAgE,cAAc,aAAa,0BAA0B,wBAAwB,kKAAkK,cAAc,aAAa,0BAA0B,wBAAwB,kGAAkG,cAAc,aAAa,0BAA0B,wBAAwB,wLAAwL,cAAc,aAAa,0BAA0B,wBAAwB,gBAAgB,OAAO,0BAA0B,UAAU,mCAAmC,kDAAkD,uEAAuE,cAAc,aAAa,0BAA0B,wBAAwB,wNAAwN,cAAc,aAAa,0BAA0B,wBAAwB,iLAAiL,cAAc,aAAa,0BAA0B,wBAAwB,gKAAgK,cAAc,aAAa,0BAA0B,wBAAwB,gBAAgB,OAAO,eAAe,UAAU,mCAAmC,uCAAuC,4DAA4D,cAAc,aAAa,0BAA0B,wBAAwB,yIAAyI,cAAc,aAAa,0BAA0B,wBAAwB,gHAAgH,cAAc,aAAa,0BAA0B,wBAAwB,kKAAkK,cAAc,aAAa,0BAA0B,wBAAwB,gBAAgB,OAAO,eAAe,UAAU,mCAAmC,uCAAuC,4DAA4D,cAAc,aAAa,0BAA0B,wBAAwB,2HAA2H,cAAc,aAAa,0BAA0B,wBAAwB,iLAAiL,cAAc,aAAa,0BAA0B,wBAAwB,wPAAwP,cAAc,aAAa,0BAA0B,wBAAwB,gBAAgB,OAAO,mBAAmB,UAAU,mCAAmC,2CAA2C,gEAAgE,cAAc,aAAa,0BAA0B,wBAAwB,gLAAgL,cAAc,aAAa,0BAA0B,wBAAwB,6LAA6L,cAAc,aAAa,0BAA0B,wBAAwB,qKAAqK,cAAc,aAAa,0BAA0B,wBAAwB,0MAA0M,cAAc,aAAa,0BAA0B,wBAAwB,4nBAA4nB,cAAc,aAAa,0BAA0B,wBAAwB,yBAAyB,OAAO,yHAAyH,IAAI,cAAc,aAAa,0BAA0B,wBAAwB,iXAAiX,cAAc,aAAa,0BAA0B,wBAAwB,gBAAgB,OAAO,kBAAkB,UAAU,mCAAmC,0CAA0C,+DAA+D,cAAc,aAAa,0BAA0B,wBAAwB,0JAA0J,cAAc,aAAa,0BAA0B,wBAAwB,kOAAkO,cAAc,aAAa,0BAA0B,wBAAwB,gUAAgU,cAAc,aAAa,0BAA0B,wBAAwB,6LAA6L,cAAc,aAAa,0BAA0B,wBAAwB,2IAA2I,cAAc,aAAa,0BAA0B,wBAAwB,gBAAgB,OAAO,eAAe,UAAU,mCAAmC,uCAAuC,4DAA4D,cAAc,aAAa,0BAA0B,wBAAwB,2aAA2a,cAAc,aAAa,0BAA0B,wBAAwB,6JAA6J,cAAc,aAAa,0BAA0B,wBAAwB,oJAAoJ;;;;;;;;;;;;;;;;;;ACDhtT;AAClC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gF;;;;;;;;;;;;;;wCClB2T,yVAAoB,C","file":"assets/js/32.59bcb491.js","sourcesContent":["<template>\n<div class=\"content\"><p>版本控制系统的一个好处就是你可以轻易地撤销之前错误的操作。</p>\n<p>当你用 <code>git commit</code> 提交了一个新的更改后 git 会将当时的文件内容暂时保存下来，之后你就可以用 git 随意回滚到任意一个版本。</p>\n<p>这篇文章会介绍一些常见的可能用到撤销 <code>undo</code> 操作的情况。</p>\n<h2 id=\"撤销一个已发布的更新\"><a class=\"header-anchor\" href=\"#撤销一个已发布的更新\" aria-hidden=\"true\">#</a> <span>撤销一个已发布的更新</span></h2>\n<p><strong>情景</strong>: 你已经用 <code>git push</code> 将代码提交到了 GitHub，然后你意识到这其中的一个 commit 有错误，于是你想撤销那个 commit。</p>\n<p><strong>操作</strong>: <code>git revert &lt;SHA&gt;</code></p>\n<p><strong>效果</strong>: git 会新建一个新的 commit 来执行提供的 <code>&lt;SHA&gt;</code> 对应 commit 的相反的更改，任何在该旧 commit 中删除的内容将会在新 commit 中添加进去，反之亦然。</p>\n<p>这是 git 里最安全的撤消操作的办法，因为这不会影响你的提交历史。于是现在你可以提交新的 commit 去撤销之前错误的操作了。</p>\n<h2 id=\"修改上次-commit-的提交信息\"><a class=\"header-anchor\" href=\"#修改上次-commit-的提交信息\" aria-hidden=\"true\">#</a> <span>修改上次 commit 的提交信息</span></h2>\n<p><strong>情景</strong>: 你在上次 commit 提交信息中打错了一个单词，比如你执行了 <code>git commit -m &quot;fxied bug #42&quot;</code> 然后你意识到应该是 <code>fixed bug #42</code>。</p>\n<p><strong>操作</strong>: <code>git commit --amend</code> 或 <code>git commit --amend -m &quot;Fixes bug #42&quot;</code></p>\n<p><strong>效果</strong>: <code>git commit --amend</code> 结合最新的文件修改情况和上一次提交信息更新并替换上一次提交。没有新的文件更改就直接覆盖上次提交。</p>\n<h2 id=\"撤销本地修改\"><a class=\"header-anchor\" href=\"#撤销本地修改\" aria-hidden=\"true\">#</a> <span>撤销本地修改</span></h2>\n<p><strong>情景</strong>: 你家的喵星人跑到你的键盘上装逼用双爪打字然后不知怎么还点了保存，然后编辑器还崩溃了，你还没有 commit 这只猫做的修改，你想撤销那个文件里被猫修改的内容。</p>\n<p><strong>操作</strong>: <code>git checkout -- &lt;bad filename&gt;</code></p>\n<p><strong>效果</strong>: <code>git checkout</code> 会将该文件的内容恢复到上一次 git commit 的状态。你可以提供一个分支名称或者直接提供要回到的 SHA。</p>\n<p>请记住，这种方法作出的撤销是彻底的，这些内容不会被 commit 所以之后你并不能再用 git 恢复这些内容。</p>\n<h2 id=\"重置本地修改\"><a class=\"header-anchor\" href=\"#重置本地修改\" aria-hidden=\"true\">#</a> <span>重置本地修改</span></h2>\n<p><strong>情景</strong>: 你在本地 commit 了一些内容（并没有 push），但是你搞错了，你想撤销最近这三个 commit，就像让它们从来不存在那样。</p>\n<p><strong>操作</strong>: <code>git reset &lt;last good SHA&gt;</code> 或 <code>git reset --hard &lt;last good SHA&gt;</code></p>\n<p><strong>效果</strong>: <code>git reset</code> 会让你的 git 历史会退到你指定的 SHA 的状态。这些 commit 不存在了但是你硬盘上的这些文件还是维持在被修改了的状态，这是最安全的做法。但是有时你也想同时撤销硬盘上的修改，这时加上 <code>--hard</code> 就会很有用。</p>\n<h2 id=\"撤销本地修改之后重做\"><a class=\"header-anchor\" href=\"#撤销本地修改之后重做\" aria-hidden=\"true\">#</a> <span>撤销本地修改之后重做</span></h2>\n<p><strong>情景</strong>: 你提交了一些 commit，然后执行 <code>git reset --hard</code> 来撤消这些 commit 并清除本地硬盘上的修改。但是最后你意识到你想要回这些 commit！</p>\n<p><strong>操作</strong>: <code>git reflog</code> 和 <code>git reset</code> 或 <code>git checkout</code></p>\n<p><strong>效果</strong>: <code>git reflog</code> 是个修复项目提交历史的好方法。你可以找回几乎所有内容 —— 所有你 commit 过的内容 —— 用 reflog 就行。</p>\n<p>你可能对 <code>git log</code> 很熟悉，这个操作会列出你的 git 提交历史。<code>git reflog</code> 很像它，但是列出的是 <code>HEAD</code> 修改的时间。</p>\n<p>一些说明:</p>\n<ul>\n<li><code>HEAD</code> 修改。在切换分支时 <code>HEAD</code> 会被修改，用 commit 保存修改然后用 reset 撤消修改。但是在你 <code>git checkout -- &lt;bad filename&gt;</code> 时并不会被修改，就像上面说过的那样，这些修改不会被 commit，所以 <code>git reflog</code> 也不能帮你找回这些内容。</li>\n<li><code>git reflog</code> 不是永远有用的。git 会定期清理那些无法追溯的内容。不要期望能用 <code>git reflog</code> 找回一个多月以前的内容。</li>\n<li>你的 <code>git reflog</code> 仅对你有用。你不能用 <code>git reflog</code> 来找回其他人 commit 的修改。</li>\n</ul>\n<p><img src=\"https://cloud.githubusercontent.com/assets/2077/6953866/f6b9f054-d891-11e4-8c53-838eff9f40ae.png\" alt=\"reflog\"></p>\n<p>然后...接下来怎么做才能撤销之前的撤销？这取决你到你要干什么:</p>\n<ul>\n<li>如果你想回到一个特定的时间，用 <code>git reset --hard &lt;SHA&gt;</code>。</li>\n<li>如果你想在不修改提交历史的情况下找回那些文件并作为新文件保存，用 <code>git checkout &lt;SHA&gt; -- &lt;filename&gt;</code>。</li>\n<li>如果你想使其中一个 commit 回到你的项目历史中，用 <code>git cherry-pick &lt;SHA&gt;</code>。</li>\n</ul>\n<h2 id=\"提交到了另一个分支\"><a class=\"header-anchor\" href=\"#提交到了另一个分支\" aria-hidden=\"true\">#</a> <span>提交到了另一个分支</span></h2>\n<p><strong>情景</strong>: 你提交了一些 commits，然后意识到你当前是在 master 分支上，而你其实是想提交到一个 <code>feature</code> 分支上。</p>\n<p><strong>操作</strong>: <code>git branch feature</code>, <code>git reset --hard origin/master</code>, 和 <code>git checkout feature</code></p>\n<p><strong>效果</strong>: 你可能常常使用 <code>git checkout -b &lt;name&gt;</code> 操作来检出一个新分支，这是一个很方便的创建新分支的操作，但是你并不想同时切换到那个分支上。现在使用 <code>git branch feature</code> 既可以创建一个 <code>feature</code> 新分支并且不会切换到那个分支，同时该分支会指向你当前分支最新的一个 commit。</p>\n<p>下一步，用 <code>git reset --hard</code> 去恢复 <code>master</code> 分支到 <code>origin/master</code> 的状态。</p>\n<p>最后，<code>git checkout</code> 到你的 <code>feature</code> 分支，你能看到所有的更改。</p>\n<h2 id=\"覆盖整个分支\"><a class=\"header-anchor\" href=\"#覆盖整个分支\" aria-hidden=\"true\">#</a> <span>覆盖整个分支</span></h2>\n<p><strong>情景</strong>: 你基于 <code>master</code> 分支创建了 <code>feature</code> 分支，但是 <code>master</code> 分支远远落后 <code>origin/master</code> 的更改。现在 <code>master</code> 分支和 <code>origin/master</code> 同步了，你想马上同步到 <code>feature</code> 分支，还不是再次远远落后。</p>\n<p><strong>操作</strong>: <code>git checkout feature</code> 和 <code>git rebase master</code></p>\n<p><strong>效果</strong>: 你可能知道用 <code>git reset</code> 然后重新 commit 来达到类似效果，不过那样会丢失 commit 历史。</p>\n<hr>\n<p>本文乃原文常用部分译文: <a href=\"https://github.com/blog/2019-how-to-undo-almost-anything-with-git\" target=\"_blank\" rel=\"noopener noreferrer\">How to undo (almost) anything with Git<OutboundLink/></a> —— 作者: <a href=\"https://github.com/jaw6\" target=\"_blank\" rel=\"noopener noreferrer\">jaw6<OutboundLink/></a></p>\n</div>\n</template>\n<script>export default { props: ['target'] }</script>","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('p',[_vm._v(\"版本控制系统的一个好处就是你可以轻易地撤销之前错误的操作。\")]),_vm._v(\" \"),_vm._m(0),_vm._v(\" \"),_vm._m(1),_vm._v(\" \"),_vm._m(2),_vm._v(\" \"),_vm._m(3),_vm._v(\" \"),_vm._m(4),_vm._v(\" \"),_vm._m(5),_vm._v(\" \"),_c('p',[_vm._v(\"这是 git 里最安全的撤消操作的办法，因为这不会影响你的提交历史。于是现在你可以提交新的 commit 去撤销之前错误的操作了。\")]),_vm._v(\" \"),_vm._m(6),_vm._v(\" \"),_vm._m(7),_vm._v(\" \"),_vm._m(8),_vm._v(\" \"),_vm._m(9),_vm._v(\" \"),_vm._m(10),_vm._v(\" \"),_vm._m(11),_vm._v(\" \"),_vm._m(12),_vm._v(\" \"),_vm._m(13),_vm._v(\" \"),_c('p',[_vm._v(\"请记住，这种方法作出的撤销是彻底的，这些内容不会被 commit 所以之后你并不能再用 git 恢复这些内容。\")]),_vm._v(\" \"),_vm._m(14),_vm._v(\" \"),_vm._m(15),_vm._v(\" \"),_vm._m(16),_vm._v(\" \"),_vm._m(17),_vm._v(\" \"),_vm._m(18),_vm._v(\" \"),_vm._m(19),_vm._v(\" \"),_vm._m(20),_vm._v(\" \"),_vm._m(21),_vm._v(\" \"),_vm._m(22),_vm._v(\" \"),_c('p',[_vm._v(\"一些说明:\")]),_vm._v(\" \"),_vm._m(23),_vm._v(\" \"),_vm._m(24),_vm._v(\" \"),_c('p',[_vm._v(\"然后...接下来怎么做才能撤销之前的撤销？这取决你到你要干什么:\")]),_vm._v(\" \"),_vm._m(25),_vm._v(\" \"),_vm._m(26),_vm._v(\" \"),_vm._m(27),_vm._v(\" \"),_vm._m(28),_vm._v(\" \"),_vm._m(29),_vm._v(\" \"),_vm._m(30),_vm._v(\" \"),_vm._m(31),_vm._v(\" \"),_vm._m(32),_vm._v(\" \"),_vm._m(33),_vm._v(\" \"),_vm._m(34),_vm._v(\" \"),_vm._m(35),_vm._v(\" \"),_c('hr'),_vm._v(\" \"),_c('p',[_vm._v(\"本文乃原文常用部分译文: \"),_c('a',{attrs:{\"href\":\"https://github.com/blog/2019-how-to-undo-almost-anything-with-git\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"How to undo (almost) anything with Git\"),_c('OutboundLink')],1),_vm._v(\" —— 作者: \"),_c('a',{attrs:{\"href\":\"https://github.com/jaw6\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"jaw6\"),_c('OutboundLink')],1)])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"当你用 \"),_c('code',[_vm._v(\"git commit\")]),_vm._v(\" 提交了一个新的更改后 git 会将当时的文件内容暂时保存下来，之后你就可以用 git 随意回滚到任意一个版本。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"这篇文章会介绍一些常见的可能用到撤销 \"),_c('code',[_vm._v(\"undo\")]),_vm._v(\" 操作的情况。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"撤销一个已发布的更新\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#撤销一个已发布的更新\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" \"),_c('span',[_vm._v(\"撤销一个已发布的更新\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"情景\")]),_vm._v(\": 你已经用 \"),_c('code',[_vm._v(\"git push\")]),_vm._v(\" 将代码提交到了 GitHub，然后你意识到这其中的一个 commit 有错误，于是你想撤销那个 commit。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"操作\")]),_vm._v(\": \"),_c('code',[_vm._v(\"git revert <SHA>\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"效果\")]),_vm._v(\": git 会新建一个新的 commit 来执行提供的 \"),_c('code',[_vm._v(\"<SHA>\")]),_vm._v(\" 对应 commit 的相反的更改，任何在该旧 commit 中删除的内容将会在新 commit 中添加进去，反之亦然。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"修改上次-commit-的提交信息\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#修改上次-commit-的提交信息\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" \"),_c('span',[_vm._v(\"修改上次 commit 的提交信息\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"情景\")]),_vm._v(\": 你在上次 commit 提交信息中打错了一个单词，比如你执行了 \"),_c('code',[_vm._v(\"git commit -m \\\"fxied bug #42\\\"\")]),_vm._v(\" 然后你意识到应该是 \"),_c('code',[_vm._v(\"fixed bug #42\")]),_vm._v(\"。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"操作\")]),_vm._v(\": \"),_c('code',[_vm._v(\"git commit --amend\")]),_vm._v(\" 或 \"),_c('code',[_vm._v(\"git commit --amend -m \\\"Fixes bug #42\\\"\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"效果\")]),_vm._v(\": \"),_c('code',[_vm._v(\"git commit --amend\")]),_vm._v(\" 结合最新的文件修改情况和上一次提交信息更新并替换上一次提交。没有新的文件更改就直接覆盖上次提交。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"撤销本地修改\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#撤销本地修改\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" \"),_c('span',[_vm._v(\"撤销本地修改\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"情景\")]),_vm._v(\": 你家的喵星人跑到你的键盘上装逼用双爪打字然后不知怎么还点了保存，然后编辑器还崩溃了，你还没有 commit 这只猫做的修改，你想撤销那个文件里被猫修改的内容。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"操作\")]),_vm._v(\": \"),_c('code',[_vm._v(\"git checkout -- <bad filename>\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"效果\")]),_vm._v(\": \"),_c('code',[_vm._v(\"git checkout\")]),_vm._v(\" 会将该文件的内容恢复到上一次 git commit 的状态。你可以提供一个分支名称或者直接提供要回到的 SHA。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"重置本地修改\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#重置本地修改\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" \"),_c('span',[_vm._v(\"重置本地修改\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"情景\")]),_vm._v(\": 你在本地 commit 了一些内容（并没有 push），但是你搞错了，你想撤销最近这三个 commit，就像让它们从来不存在那样。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"操作\")]),_vm._v(\": \"),_c('code',[_vm._v(\"git reset <last good SHA>\")]),_vm._v(\" 或 \"),_c('code',[_vm._v(\"git reset --hard <last good SHA>\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"效果\")]),_vm._v(\": \"),_c('code',[_vm._v(\"git reset\")]),_vm._v(\" 会让你的 git 历史会退到你指定的 SHA 的状态。这些 commit 不存在了但是你硬盘上的这些文件还是维持在被修改了的状态，这是最安全的做法。但是有时你也想同时撤销硬盘上的修改，这时加上 \"),_c('code',[_vm._v(\"--hard\")]),_vm._v(\" 就会很有用。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"撤销本地修改之后重做\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#撤销本地修改之后重做\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" \"),_c('span',[_vm._v(\"撤销本地修改之后重做\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"情景\")]),_vm._v(\": 你提交了一些 commit，然后执行 \"),_c('code',[_vm._v(\"git reset --hard\")]),_vm._v(\" 来撤消这些 commit 并清除本地硬盘上的修改。但是最后你意识到你想要回这些 commit！\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"操作\")]),_vm._v(\": \"),_c('code',[_vm._v(\"git reflog\")]),_vm._v(\" 和 \"),_c('code',[_vm._v(\"git reset\")]),_vm._v(\" 或 \"),_c('code',[_vm._v(\"git checkout\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"效果\")]),_vm._v(\": \"),_c('code',[_vm._v(\"git reflog\")]),_vm._v(\" 是个修复项目提交历史的好方法。你可以找回几乎所有内容 —— 所有你 commit 过的内容 —— 用 reflog 就行。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"你可能对 \"),_c('code',[_vm._v(\"git log\")]),_vm._v(\" 很熟悉，这个操作会列出你的 git 提交历史。\"),_c('code',[_vm._v(\"git reflog\")]),_vm._v(\" 很像它，但是列出的是 \"),_c('code',[_vm._v(\"HEAD\")]),_vm._v(\" 修改的时间。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('code',[_vm._v(\"HEAD\")]),_vm._v(\" 修改。在切换分支时 \"),_c('code',[_vm._v(\"HEAD\")]),_vm._v(\" 会被修改，用 commit 保存修改然后用 reset 撤消修改。但是在你 \"),_c('code',[_vm._v(\"git checkout -- <bad filename>\")]),_vm._v(\" 时并不会被修改，就像上面说过的那样，这些修改不会被 commit，所以 \"),_c('code',[_vm._v(\"git reflog\")]),_vm._v(\" 也不能帮你找回这些内容。\")]),_vm._v(\" \"),_c('li',[_c('code',[_vm._v(\"git reflog\")]),_vm._v(\" 不是永远有用的。git 会定期清理那些无法追溯的内容。不要期望能用 \"),_c('code',[_vm._v(\"git reflog\")]),_vm._v(\" 找回一个多月以前的内容。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"你的 \"),_c('code',[_vm._v(\"git reflog\")]),_vm._v(\" 仅对你有用。你不能用 \"),_c('code',[_vm._v(\"git reflog\")]),_vm._v(\" 来找回其他人 commit 的修改。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://cloud.githubusercontent.com/assets/2077/6953866/f6b9f054-d891-11e4-8c53-838eff9f40ae.png\",\"alt\":\"reflog\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"如果你想回到一个特定的时间，用 \"),_c('code',[_vm._v(\"git reset --hard <SHA>\")]),_vm._v(\"。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"如果你想在不修改提交历史的情况下找回那些文件并作为新文件保存，用 \"),_c('code',[_vm._v(\"git checkout <SHA> -- <filename>\")]),_vm._v(\"。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"如果你想使其中一个 commit 回到你的项目历史中，用 \"),_c('code',[_vm._v(\"git cherry-pick <SHA>\")]),_vm._v(\"。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"提交到了另一个分支\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#提交到了另一个分支\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" \"),_c('span',[_vm._v(\"提交到了另一个分支\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"情景\")]),_vm._v(\": 你提交了一些 commits，然后意识到你当前是在 master 分支上，而你其实是想提交到一个 \"),_c('code',[_vm._v(\"feature\")]),_vm._v(\" 分支上。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"操作\")]),_vm._v(\": \"),_c('code',[_vm._v(\"git branch feature\")]),_vm._v(\", \"),_c('code',[_vm._v(\"git reset --hard origin/master\")]),_vm._v(\", 和 \"),_c('code',[_vm._v(\"git checkout feature\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"效果\")]),_vm._v(\": 你可能常常使用 \"),_c('code',[_vm._v(\"git checkout -b <name>\")]),_vm._v(\" 操作来检出一个新分支，这是一个很方便的创建新分支的操作，但是你并不想同时切换到那个分支上。现在使用 \"),_c('code',[_vm._v(\"git branch feature\")]),_vm._v(\" 既可以创建一个 \"),_c('code',[_vm._v(\"feature\")]),_vm._v(\" 新分支并且不会切换到那个分支，同时该分支会指向你当前分支最新的一个 commit。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"下一步，用 \"),_c('code',[_vm._v(\"git reset --hard\")]),_vm._v(\" 去恢复 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 分支到 \"),_c('code',[_vm._v(\"origin/master\")]),_vm._v(\" 的状态。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"最后，\"),_c('code',[_vm._v(\"git checkout\")]),_vm._v(\" 到你的 \"),_c('code',[_vm._v(\"feature\")]),_vm._v(\" 分支，你能看到所有的更改。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"覆盖整个分支\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#覆盖整个分支\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" \"),_c('span',[_vm._v(\"覆盖整个分支\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"情景\")]),_vm._v(\": 你基于 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 分支创建了 \"),_c('code',[_vm._v(\"feature\")]),_vm._v(\" 分支，但是 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 分支远远落后 \"),_c('code',[_vm._v(\"origin/master\")]),_vm._v(\" 的更改。现在 \"),_c('code',[_vm._v(\"master\")]),_vm._v(\" 分支和 \"),_c('code',[_vm._v(\"origin/master\")]),_vm._v(\" 同步了，你想马上同步到 \"),_c('code',[_vm._v(\"feature\")]),_vm._v(\" 分支，还不是再次远远落后。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"操作\")]),_vm._v(\": \"),_c('code',[_vm._v(\"git checkout feature\")]),_vm._v(\" 和 \"),_c('code',[_vm._v(\"git rebase master\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"效果\")]),_vm._v(\": 你可能知道用 \"),_c('code',[_vm._v(\"git reset\")]),_vm._v(\" 然后重新 commit 来达到类似效果，不过那样会丢失 commit 历史。\")])}]\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./how-to-undo-with-git.md?vue&type=template&id=38e353c8&\"\nimport script from \"./how-to-undo-with-git.md?vue&type=script&lang=js&\"\nexport * from \"./how-to-undo-with-git.md?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--3-0!../../../../node_modules/babel-loader/lib/index.js??ref--3-1!../../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../@vuepress/core/lib/webpack/markdownLoader.js??ref--1-2!./how-to-undo-with-git.md?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--3-0!../../../../node_modules/babel-loader/lib/index.js??ref--3-1!../../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../@vuepress/core/lib/webpack/markdownLoader.js??ref--1-2!./how-to-undo-with-git.md?vue&type=script&lang=js&\""],"sourceRoot":""}