(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{137:function(t,s,n){"use strict";n.r(s);var a={props:["target"]},e=n(17),r=Object(e.a)(a,function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[n("p",[n("a",{attrs:{href:"https://github.com/eslint/eslint",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESLint"),n("OutboundLink")],1),t._v(" 可以检测出你代码中潜在的问题，比如使用了某个变量却忘记了定义，而 "),n("a",{attrs:{href:"https://github.com/prettier/prettier",target:"_blank",rel:"noopener noreferrer"}},[t._v("Prettier"),n("OutboundLink")],1),t._v(" 作为代码格式化工具，能够统一你或者你的团队的代码风格。")]),t._v(" "),n("p",[t._v("本文不会介绍这两种工具单独的使用方法，因为相关网络资料已经足够多了。这里我介绍一下怎么同时使用它们。")]),t._v(" "),t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._m(12)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"在-eslint-中使用-eslint-plugin-prettier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-eslint-中使用-eslint-plugin-prettier","aria-hidden":"true"}},[this._v("#")]),this._v(" 在 ESLint 中使用 eslint-plugin-prettier")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("为什么使用这种方法: 希望格式化结果完全符合 Prettier 的要求。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("eslint-plugin-prettier")]),this._v(" 的工作原理是，对比格式化前和用 Prettier 格式化后的代码，有不一致的地方就会报错，然后你可以手动运行 "),s("code",[this._v("eslint --fix")]),this._v(" 来修复。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("不过 Prettier 的格式化很可能和你使用的 ESLint 配置冲突，比如你的 ESLint 设定的不使用分号，而 Prettier 默认使用分号，这时候你需要配置 Prettier 让它不使用分号。反之如果你想使用 Prettier 的规则而不是 ESLint 的，为防止 ESLint 报错，你需要使用 "),s("code",[this._v("eslint-config-prettier")]),this._v(" 来关闭所有可能引起冲突的规则。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("总结一下我的配置如下 "),s("code",[this._v("package.json")]),this._v(":")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token property"}},[t._v('"scripts"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token property"}},[t._v('"lint"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"eslint *.js"')]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token property"}},[t._v('"eslintConfig"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token property"}},[t._v('"extends"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),n("span",{attrs:{class:"token string"}},[t._v('"prettier"')]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token property"}},[t._v('"plugins"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),n("span",{attrs:{class:"token string"}},[t._v('"prettier"')]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token property"}},[t._v('"rules"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token property"}},[t._v('"prettier/prettier"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"error"')]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token property"}},[t._v('"prettier"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token property"}},[t._v('"singleQuote"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token property"}},[t._v('"semi"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("你可以使用大多数编辑器里 ESLint 插件提供的 "),s("code",[this._v("autoFixOnSave")]),this._v(" 选项来在保存时自动格式化。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"使用-prettier-eslint-cli"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-prettier-eslint-cli","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用 prettier-eslint-cli")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("为什么使用它: 希望格式化结果完全符合 ESLint 的要求。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("使用 ESLint 与 "),s("code",[this._v("eslint-plugin-prettier")]),this._v(" 的结果是最终得到的代码是充分尊重 Prettier 的结果，而 "),s("code",[this._v("prettier-eslint-cli")]),this._v(" 则是先执行 Prettier 然后再自动使用 "),s("code",[this._v("eslint --fix")]),this._v(" 将与 ESLint 规则冲突的代码修正成 ESLint 想要的结果。这样其实引入 Prettier 不会影响你原有的设置。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("总结一下我的配置如下 "),s("code",[this._v("package.json")]),this._v(":")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token property"}},[t._v('"scripts"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    // ESLint 只负责检查代码质量\n    "),n("span",{attrs:{class:"token property"}},[t._v('"lint"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"eslint *.js"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    // 用 Prettier 格式化代码并自动 `eslint --fix `以便下次执行 `npm run lint` 时不会报错\n    "),n("span",{attrs:{class:"token property"}},[t._v('"format"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"prettier-eslint --write *.js"')]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token property"}},[t._v('"eslintConfig"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token property"}},[t._v('"extends"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"some-config"')]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token property"}},[t._v('"prettier"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token property"}},[t._v('"singleQuote"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token property"}},[t._v('"semi"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("除了命令行的 "),s("code",[this._v("npm run format")]),this._v("，同时你也可以使用编辑器里的 Prettier 插件，并启用 "),s("code",[this._v("eslintIntegration")]),this._v(" 来在编辑器里自动格式化代码。")])}],!1,null,null,null);s.default=r.exports}}]);