{"version":3,"sources":["webpack:///source/_posts/write-better-code-with-eslint-and-prettier.md","webpack:///./source/_posts/write-better-code-with-eslint-and-prettier.md?fc11","webpack:///./source/_posts/write-better-code-with-eslint-and-prettier.md","webpack:///./source/_posts/write-better-code-with-eslint-and-prettier.md?cb54"],"names":[],"mappings":"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","file":"assets/js/54.df98f970.js","sourcesContent":["<template>\n<div class=\"content\"><p><a href=\"https://github.com/eslint/eslint\" target=\"_blank\" rel=\"noopener noreferrer\">ESLint<OutboundLink/></a> 可以检测出你代码中潜在的问题，比如使用了某个变量却忘记了定义，而 <a href=\"https://github.com/prettier/prettier\" target=\"_blank\" rel=\"noopener noreferrer\">Prettier<OutboundLink/></a> 作为代码格式化工具，能够统一你或者你的团队的代码风格。</p>\n<p>本文不会介绍这两种工具单独的使用方法，因为相关网络资料已经足够多了。这里我介绍一下怎么同时使用它们。</p>\n<h2 id=\"在-eslint-中使用-eslint-plugin-prettier\"><a class=\"header-anchor\" href=\"#在-eslint-中使用-eslint-plugin-prettier\" aria-hidden=\"true\">#</a> 在 ESLint 中使用 eslint-plugin-prettier</h2>\n<p><strong>为什么使用这种方法: 希望格式化结果完全符合 Prettier 的要求。</strong></p>\n<p><code>eslint-plugin-prettier</code> 的工作原理是，对比格式化前和用 Prettier 格式化后的代码，有不一致的地方就会报错，然后你可以手动运行 <code>eslint --fix</code> 来修复。</p>\n<p>不过 Prettier 的格式化很可能和你使用的 ESLint 配置冲突，比如你的 ESLint 设定的不使用分号，而 Prettier 默认使用分号，这时候你需要配置 Prettier 让它不使用分号。反之如果你想使用 Prettier 的规则而不是 ESLint 的，为防止 ESLint 报错，你需要使用 <code>eslint-config-prettier</code> 来关闭所有可能引起冲突的规则。</p>\n<p>总结一下我的配置如下 <code>package.json</code>:</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint *.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslintConfig\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"prettier\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"prettier\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"prettier/prettier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"prettier\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>你可以使用大多数编辑器里 ESLint 插件提供的 <code>autoFixOnSave</code> 选项来在保存时自动格式化。</p>\n<h2 id=\"使用-prettier-eslint-cli\"><a class=\"header-anchor\" href=\"#使用-prettier-eslint-cli\" aria-hidden=\"true\">#</a> 使用 prettier-eslint-cli</h2>\n<p><strong>为什么使用它: 希望格式化结果完全符合 ESLint 的要求。</strong></p>\n<p>使用 ESLint 与 <code>eslint-plugin-prettier</code> 的结果是最终得到的代码是充分尊重 Prettier 的结果，而 <code>prettier-eslint-cli</code> 则是先执行 Prettier 然后再自动使用 <code>eslint --fix</code> 将与 ESLint 规则冲突的代码修正成 ESLint 想要的结果。这样其实引入 Prettier 不会影响你原有的设置。</p>\n<p>总结一下我的配置如下 <code>package.json</code>:</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    // ESLint 只负责检查代码质量\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint *.js\"</span><span class=\"token punctuation\">,</span>\n    // 用 Prettier 格式化代码并自动 `eslint --fix `以便下次执行 `npm run lint` 时不会报错\n    <span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier-eslint --write *.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslintConfig\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"some-config\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"prettier\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>除了命令行的 <code>npm run format</code>，同时你也可以使用编辑器里的 Prettier 插件，并启用 <code>eslintIntegration</code> 来在编辑器里自动格式化代码。</p>\n</div>\n</template>\n<script>export default { props: ['target'] }</script>","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('p',[_c('a',{attrs:{\"href\":\"https://github.com/eslint/eslint\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"ESLint\"),_c('OutboundLink')],1),_vm._v(\" 可以检测出你代码中潜在的问题，比如使用了某个变量却忘记了定义，而 \"),_c('a',{attrs:{\"href\":\"https://github.com/prettier/prettier\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"Prettier\"),_c('OutboundLink')],1),_vm._v(\" 作为代码格式化工具，能够统一你或者你的团队的代码风格。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"本文不会介绍这两种工具单独的使用方法，因为相关网络资料已经足够多了。这里我介绍一下怎么同时使用它们。\")]),_vm._v(\" \"),_vm._m(0),_vm._v(\" \"),_vm._m(1),_vm._v(\" \"),_vm._m(2),_vm._v(\" \"),_vm._m(3),_vm._v(\" \"),_vm._m(4),_vm._v(\" \"),_vm._m(5),_vm._m(6),_vm._v(\" \"),_vm._m(7),_vm._v(\" \"),_vm._m(8),_vm._v(\" \"),_vm._m(9),_vm._v(\" \"),_vm._m(10),_vm._v(\" \"),_vm._m(11),_vm._m(12)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"在-eslint-中使用-eslint-plugin-prettier\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#在-eslint-中使用-eslint-plugin-prettier\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 在 ESLint 中使用 eslint-plugin-prettier\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"为什么使用这种方法: 希望格式化结果完全符合 Prettier 的要求。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"eslint-plugin-prettier\")]),_vm._v(\" 的工作原理是，对比格式化前和用 Prettier 格式化后的代码，有不一致的地方就会报错，然后你可以手动运行 \"),_c('code',[_vm._v(\"eslint --fix\")]),_vm._v(\" 来修复。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"不过 Prettier 的格式化很可能和你使用的 ESLint 配置冲突，比如你的 ESLint 设定的不使用分号，而 Prettier 默认使用分号，这时候你需要配置 Prettier 让它不使用分号。反之如果你想使用 Prettier 的规则而不是 ESLint 的，为防止 ESLint 报错，你需要使用 \"),_c('code',[_vm._v(\"eslint-config-prettier\")]),_vm._v(\" 来关闭所有可能引起冲突的规则。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"总结一下我的配置如下 \"),_c('code',[_vm._v(\"package.json\")]),_vm._v(\":\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-json extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-json\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"scripts\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"lint\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"eslint *.js\\\"\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"eslintConfig\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"extends\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_vm._v(\"\\n      \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"prettier\\\"\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"plugins\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_vm._v(\"\\n      \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"prettier\\\"\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"rules\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n      \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"prettier/prettier\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"error\\\"\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"prettier\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"singleQuote\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token boolean\"}},[_vm._v(\"true\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"semi\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token boolean\"}},[_vm._v(\"false\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"你可以使用大多数编辑器里 ESLint 插件提供的 \"),_c('code',[_vm._v(\"autoFixOnSave\")]),_vm._v(\" 选项来在保存时自动格式化。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"使用-prettier-eslint-cli\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#使用-prettier-eslint-cli\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 使用 prettier-eslint-cli\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"为什么使用它: 希望格式化结果完全符合 ESLint 的要求。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"使用 ESLint 与 \"),_c('code',[_vm._v(\"eslint-plugin-prettier\")]),_vm._v(\" 的结果是最终得到的代码是充分尊重 Prettier 的结果，而 \"),_c('code',[_vm._v(\"prettier-eslint-cli\")]),_vm._v(\" 则是先执行 Prettier 然后再自动使用 \"),_c('code',[_vm._v(\"eslint --fix\")]),_vm._v(\" 将与 ESLint 规则冲突的代码修正成 ESLint 想要的结果。这样其实引入 Prettier 不会影响你原有的设置。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"总结一下我的配置如下 \"),_c('code',[_vm._v(\"package.json\")]),_vm._v(\":\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-json extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-json\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"scripts\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    // ESLint 只负责检查代码质量\\n    \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"lint\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"eslint *.js\\\"\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"\\n    // 用 Prettier 格式化代码并自动 `eslint --fix `以便下次执行 `npm run lint` 时不会报错\\n    \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"format\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"prettier-eslint --write *.js\\\"\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"eslintConfig\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"extends\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"some-config\\\"\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"prettier\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"singleQuote\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token boolean\"}},[_vm._v(\"true\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"semi\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token boolean\"}},[_vm._v(\"false\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"除了命令行的 \"),_c('code',[_vm._v(\"npm run format\")]),_vm._v(\"，同时你也可以使用编辑器里的 Prettier 插件，并启用 \"),_c('code',[_vm._v(\"eslintIntegration\")]),_vm._v(\" 来在编辑器里自动格式化代码。\")])}]\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./write-better-code-with-eslint-and-prettier.md?vue&type=template&id=4714c8af&\"\nimport script from \"./write-better-code-with-eslint-and-prettier.md?vue&type=script&lang=js&\"\nexport * from \"./write-better-code-with-eslint-and-prettier.md?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--3-0!../../../../node_modules/babel-loader/lib/index.js??ref--3-1!../../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../@vuepress/core/lib/webpack/markdownLoader.js??ref--1-2!./write-better-code-with-eslint-and-prettier.md?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--3-0!../../../../node_modules/babel-loader/lib/index.js??ref--3-1!../../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../@vuepress/core/lib/webpack/markdownLoader.js??ref--1-2!./write-better-code-with-eslint-and-prettier.md?vue&type=script&lang=js&\""],"sourceRoot":""}