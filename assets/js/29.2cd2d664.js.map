{"version":3,"sources":["webpack:///source/_posts/how-does-nodejs-cli-program-work.md","webpack:///./source/_posts/how-does-nodejs-cli-program-work.md?8ae5","webpack:///./source/_posts/how-does-nodejs-cli-program-work.md","webpack:///./source/_posts/how-does-nodejs-cli-program-work.md?965c"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwGA;AAAA;AAAA,G;;;;;;;;;;;;;;ACxGA;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,wgBAAwgB,qBAAqB,uCAAuC,OAAO,6FAA6F,soBAAsoB,OAAO,6FAA6F,mEAAmE,OAAO,6FAA6F,kGAAkG,OAAO,2FAA2F,2IAA2I,OAAO,sFAAsF,uHAAuH,OAAO,6EAA6E,gYAAgY,OAAO,sGAAsG,uFAAuF,OAAO,mCAAmC,OAAO,8HAA8H;AACniG,oCAAoC,aAAa,0BAA0B,wBAAwB,iBAAiB,wCAAwC,YAAY,gBAAgB,yBAAyB,wBAAwB,OAAO,yBAAyB,mEAAmE,OAAO,yBAAyB,kEAAkE,cAAc,aAAa,0BAA0B,wBAAwB,qOAAqO,cAAc,aAAa,0BAA0B,wBAAwB,iBAAiB,sCAAsC,YAAY,gBAAgB,uBAAuB,oCAAoC,OAAO,0BAA0B,2BAA2B,OAAO,0BAA0B,yCAAyC,OAAO,0BAA0B,yCAAyC,OAAO,0BAA0B,uDAAuD,OAAO,6BAA6B,2BAA2B,OAAO,0BAA0B,6BAA6B,OAAO,6BAA6B,2BAA2B,OAAO,wBAAwB,+BAA+B,OAAO,6BAA6B,mCAAmC,cAAc,aAAa,0BAA0B,wBAAwB,gcAAgc,cAAc,aAAa,0BAA0B,wBAAwB,4FAA4F,cAAc,aAAa,0BAA0B,wBAAwB,iBAAiB,wCAAwC,YAAY,gBAAgB,yBAAyB,qCAAqC,OAAO,0BAA0B,6DAA6D,cAAc,aAAa,0BAA0B,wBAAwB,kKAAkK,cAAc,aAAa,0BAA0B,wBAAwB,yBAAyB,OAAO,qEAAqE,IAAI,cAAc,aAAa,0BAA0B,wBAAwB,gBAAgB,OAAO,cAAc,UAAU,mCAAmC,sCAAsC,mCAAmC,cAAc,aAAa,0BAA0B,wBAAwB,+NAA+N,cAAc,aAAa,0BAA0B,wBAAwB,yJAAyJ,cAAc,aAAa,0BAA0B,wBAAwB,iBAAiB,sCAAsC,YAAY,gBAAgB,uBAAuB,oCAAoC,OAAO,0BAA0B,2BAA2B,OAAO,0BAA0B,yCAAyC,OAAO,0BAA0B,yCAAyC,OAAO,0BAA0B,gDAAgD,OAAO,yBAAyB,iDAAiD,OAAO,0BAA0B,8CAA8C,OAAO,6BAA6B,0CAA0C,OAAO,6BAA6B,2BAA2B,OAAO,wBAAwB,2BAA2B,OAAO,6BAA6B,uCAAuC,OAAO,0BAA0B,wCAAwC,OAAO,wBAAwB,+CAA+C,OAAO,6BAA6B,2BAA2B,OAAO,0BAA0B,6BAA6B,OAAO,6BAA6B,2BAA2B,OAAO,wBAAwB,+BAA+B,OAAO,6BAA6B,2BAA2B,OAAO,0BAA0B,gCAAgC,OAAO,6BAA6B,2CAA2C,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,mCAAmC,cAAc,aAAa,0BAA0B,wBAAwB,yBAAyB,OAAO,+EAA+E,IAAI,cAAc,aAAa,0BAA0B,wBAAwB,wQAAwQ,cAAc,aAAa,0BAA0B,wBAAwB,iBAAiB,sCAAsC,YAAY,gBAAgB,uBAAuB,wBAAwB,OAAO,yBAAyB,oDAAoD,OAAO,0BAA0B,uCAAuC,OAAO,0BAA0B,iCAAiC,OAAO,6BAA6B,2BAA2B,OAAO,wBAAwB,oCAAoC,OAAO,6BAA6B,0CAA0C,OAAO,yBAAyB,wEAAwE,OAAO,yBAAyB,gDAAgD,OAAO,0BAA0B,uCAAuC,OAAO,0BAA0B,kCAAkC,OAAO,6BAA6B,6CAA6C,OAAO,6BAA6B,0CAA0C,OAAO,6BAA6B,2BAA2B,OAAO,0BAA0B,+BAA+B,OAAO,6BAA6B,2BAA2B,OAAO,wBAAwB,2BAA2B,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,+CAA+C,OAAO,6BAA6B,2BAA2B,OAAO,0BAA0B,6BAA6B,OAAO,6BAA6B,0CAA0C,OAAO,6BAA6B,mCAAmC,cAAc,aAAa,0BAA0B,wBAAwB,yBAAyB,OAAO,0EAA0E,IAAI,cAAc,aAAa,0BAA0B,wBAAwB,gGAAgG,cAAc,aAAa,0BAA0B,wBAAwB,+DAA+D,cAAc,aAAa,0BAA0B,wBAAwB,wqCAAwqC,cAAc,aAAa,0BAA0B,wBAAwB,gBAAgB,OAAO,gBAAgB,UAAU,mCAAmC,wCAAwC,qCAAqC,cAAc,aAAa,0BAA0B,wBAAwB,gBAAgB,OAAO,gBAAgB,UAAU,mCAAmC,wCAAwC,qCAAqC,cAAc,aAAa,0BAA0B,wBAAwB,oQAAoQ,cAAc,aAAa,0BAA0B,wBAAwB,iBAAiB,sCAAsC,YAAY,gBAAgB,uBAAuB,wBAAwB,OAAO,yBAAyB,yDAAyD,OAAO,yBAAyB,+CAA+C,OAAO,0BAA0B,uCAAuC,OAAO,0BAA0B,iCAAiC,OAAO,6BAA6B,2BAA2B,OAAO,wBAAwB,+BAA+B,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,0CAA0C,OAAO,yBAAyB,mDAAmD,OAAO,6BAA6B,2BAA2B,OAAO,0BAA0B,iCAAiC,OAAO,6BAA6B,2BAA2B,OAAO,wBAAwB,8BAA8B,OAAO,6BAA6B,uCAAuC,OAAO,wBAAwB,+BAA+B,OAAO,6BAA6B,6CAA6C,OAAO,0BAA0B,wCAAwC,OAAO,6BAA6B,WAAW,sCAAsC,OAAO,6BAA6B,2BAA2B,OAAO,0BAA0B,6BAA6B,OAAO,6BAA6B,2BAA2B,OAAO,iCAAiC,aAAa,OAAO,wBAAwB,8BAA8B,OAAO,+BAA+B,aAAa,OAAO,uDAAuD,YAAY,gCAAgC,OAAO,6BAA6B,2BAA2B,OAAO,wBAAwB,2BAA2B,OAAO,6BAA6B,2BAA2B,OAAO,uDAAuD,WAAW,kBAAkB,OAAO,wBAAwB,6BAA6B,OAAO,6BAA6B,wCAAwC,OAAO,6BAA6B,WAAW,gBAAgB,OAAO,6BAA6B,0CAA0C,OAAO,yBAAyB,sEAAsE,OAAO,6BAA6B,2BAA2B,OAAO,0BAA0B,+BAA+B,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,mCAAmC,cAAc,aAAa,0BAA0B,wBAAwB,8EAA8E,cAAc,aAAa,0BAA0B,wBAAwB,yBAAyB,OAAO,qEAAqE,IAAI,cAAc,aAAa,0BAA0B,wBAAwB,yFAAyF,cAAc,aAAa,0BAA0B,wBAAwB,yFAAyF,cAAc,aAAa,0BAA0B,wBAAwB,yBAAyB,OAAO,uEAAuE,IAAI,cAAc,aAAa,0BAA0B,wBAAwB,gBAAgB,OAAO,wBAAwB,UAAU,mCAAmC,gDAAgD,6CAA6C,cAAc,aAAa,0BAA0B,wBAAwB,iHAAiH,cAAc,aAAa,0BAA0B,wBAAwB,iBAAiB,wCAAwC,YAAY,gBAAgB,yBAAyB,wBAAwB,OAAO,6BAA6B,WAAW,+BAA+B,OAAO,0BAA0B,kCAAkC,OAAO,0BAA0B,uCAAuC,OAAO,wBAAwB,oCAAoC,OAAO,6BAA6B,0CAA0C,OAAO,0BAA0B,iCAAiC,OAAO,0BAA0B,uCAAuC,OAAO,wBAAwB,mDAAmD,OAAO,6BAA6B,WAAW,wBAAwB,cAAc,aAAa,0BAA0B,wBAAwB,qLAAqL,cAAc,aAAa,0BAA0B,wBAAwB,+SAA+S,cAAc,aAAa,0BAA0B,wBAAwB,+LAA+L;;;;;;;;;;;;;;;;;;ACDl8f;AAClC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gF;;;;;;;;;;;;;;wCClBuU,qWAAoB,C","file":"assets/js/29.2cd2d664.js","sourcesContent":["<template>\n<div class=\"content\"><p>你可能已经知道，在终端里可以调用不同的解释器来执行你的程序，比如:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token comment\"># 执行一段 shell 脚本</span>\nsh ./foo.sh\n<span class=\"token comment\"># 执行一段 node.js 代码</span>\nnode ./bar.js\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>下一步你想做的可能是省略解释器，直接通过运行 <code>./foo.sh</code> 或者 <code>./bar.js</code> 来执行你的程序。想在命令行输入命令时省略解释器，你可以将它写入实际运行的程序中，比如 <code>./bar.js</code>:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>#<span class=\"token operator\">!</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>env node\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这段程序第一行由两部分组成，即 <strong>Shebang</strong> 和 <strong>解释器命令</strong>。<strong>Shebang</strong> 就是开头的 <code>#!</code>，它告诉系统调用后面声明的解释器，而我们需要调用的解释器是 <code>node</code>，执行 <code>/usr/bin/env node</code> 可以寻找到系统 <code>$PATH</code> 里第一个出现的 <code>node</code> 命令。</p>\n<p>这样你便可以通过执行 <code>./bar.js</code> 来执行这段程序了:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>❯ <span class=\"token function\">chmod</span> +x bar.js\n❯ ./bar.js\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>第一行的 <code>chmod +x bar.js</code> 是让系统允许将文件 <code>bar.js</code> 直接作为一段程序运行。现在你可以成功看到期望的输出:</p>\n<p><img src=\"https://i.loli.net/2017/10/18/59e724560f339.png\" alt=\"bar\"></p>\n<h2 id=\"命令行参数\"><a class=\"header-anchor\" href=\"#命令行参数\" aria-hidden=\"true\">#</a> 命令行参数</h2>\n<p>在网页应用里，我们依靠 <em>URL</em> 来获得展现页面内容所需要的参数，比如依靠路径 <code>/user/egoist</code> 来获取数据并渲染用户 <code>egoist</code> 的页面。而命令行程序所依靠的便是命令行参数。</p>\n<p>以刚才的 <code>bar.js</code> 为例，假设你需要将 <code>bar</code> 字符串重复 n 次输出，而 n 是用户决定的，你会这样做:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>#<span class=\"token operator\">!</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>env node\n<span class=\"token keyword\">const</span> times <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>times<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>然后在终端可以看到期望的结果:</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/10/18/59e72774a1ce7.png\" alt=\"process.argv\"></p>\n<p><code>process.argv</code> 是实际执行的命令参数列表(数组)，比如运行 <code>./bar 4</code> 实际执行的是 <code>node ./bar 4</code>，第一个参数是解释器命令 <code>node</code>，第二个是被执行的程序路径。而我们这里只需要第三个参数。</p>\n<hr>\n<p>正如浏览器里的 URL 有相应的各种路由解析库一样，将 <code>/user/egoist</code> 解析成 <code>{ username: 'egoist' }</code> 之类的，命令行参数当然也有，<a href=\"https://github.com/substack/minimist\" target=\"_blank\" rel=\"noopener noreferrer\">minimist<OutboundLink/></a> 便是 node.js 社区里应用最多的一个:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> minimist <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'minimist'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 大多数情况我们不需要关心 process.argv 的前两项</span>\n<span class=\"token keyword\">const</span> argv <span class=\"token operator\">=</span> <span class=\"token function\">minimist</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>使用不同的命令执行一下这段代码试试:</p>\n<p><img src=\"https://i.loli.net/2017/10/18/59e72c19cea1f.png\" alt=\"minimist\"></p>\n<p>之后你便可以灵活地通过 <code>argv</code> 来判断如何输出用户期望的内容了。</p>\n<p><strong>命令行参数小贴士</strong>:</p>\n<ul>\n<li>形如 <code>--foo</code> 的叫做 <code>switch</code>，也就是代表了一个布尔值 <code>foo: true</code>，后面不加任何值。\n<ul>\n<li>一般用 <code>--no-foo</code> 来表示布尔值 <code>foo: false</code>。</li>\n</ul>\n</li>\n<li>形如 <code>--name egoist</code> 的叫做 <code>flag</code>, 即后面要加值，比如字符串和数字。\n<ul>\n<li>类似的写法是 <code>--name=egoist</code>，用 <code>=</code> 而不是空格来连接。</li>\n</ul>\n</li>\n<li>只有一个连字符的一般用于其它 flag 的简写，比如用 <code>-f</code> 作为 <code>--foo</code> 的简写，使用这两个之中任何一个的效果相同。连字符后面一般是单个字符，而一个连字符加多个字符其实相当于合并了多个简写，比如 <code>-xFd</code> 相当于 <code>-x -F -d</code>。</li>\n<li>某些命令行参数解释器支持用英文小数点 <code>.</code> 连接的参数，比如: <code>--foo.bar baz</code>，解析之后对象 <code>foo</code> 的属性 <code>bar</code> 的值就是 <code>baz</code>。</li>\n</ul>\n<h2 id=\"命令行程序框架\"><a class=\"header-anchor\" href=\"#命令行程序框架\" aria-hidden=\"true\">#</a> 命令行程序框架</h2>\n<p>类似 web 开发，你当然可以完全从头写你的命令行程序，自己实现一个命令行参数解释器，然后自行判断如何根据参数返回结果。</p>\n<p>不过这有点浪费时间且本末倒置，如果你就是想学习那些方面的内容，你可以那样干，否则如果你只是想为你的一个奇思妙实现一个命令行工具，那就有点得不偿失，不如直接使用现成的框架来加速达成你原本的目标。</p>\n<h3 id=\"框架干了哪些事\"><a class=\"header-anchor\" href=\"#框架干了哪些事\" aria-hidden=\"true\">#</a> 框架干了哪些事</h3>\n<ul>\n<li>根据不同的命令[^1]调用不同的模块。</li>\n<li>自动生成帮助信息，比如执行 <code>git --help</code> 显示的内容。</li>\n<li>让整个程序更安全，比如指定 flag 哪些是必需的。</li>\n<li>自动命令补全。</li>\n</ul>\n<p>在这里我就不过多介绍框架了，毕竟只要了解原理就能举一反三，不过我还是推荐几个常用的，节省读者的时间:</p>\n<ul>\n<li><a href=\"https://github.com/sindresorhus/meow\" target=\"_blank\" rel=\"noopener noreferrer\">Meow<OutboundLink/></a>: 简单的基于 <a href=\"https://github.com/substack/minimist\" target=\"_blank\" rel=\"noopener noreferrer\">minimist<OutboundLink/></a> 的包装，没什么新功能。</li>\n<li><a href=\"https://github.com/tj/commander.js\" target=\"_blank\" rel=\"noopener noreferrer\">Commander.js<OutboundLink/></a>: 功能齐全的框架，提供类似 git 的子命令系统，自动生成帮助信息等。</li>\n<li><strong><a href=\"https://github.com/egoist/cac\" target=\"_blank\" rel=\"noopener noreferrer\">CAC<OutboundLink/></a>: 类似 Commander.js 但更轻巧、现代，支持插件。(我做的)</strong></li>\n<li><a href=\"http://yargs.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Yargs<OutboundLink/></a>: 功能强大的框架，但显得过于臃肿。</li>\n</ul>\n<p>这里用 CAC 举个简单的例子，介绍一下如何使用:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 假设把它放在 cli.js 里</span>\n<span class=\"token keyword\">const</span> cli <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cac'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 定义一个命令</span>\ncli<span class=\"token punctuation\">.</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'打招呼'</span><span class=\"token punctuation\">,</span> input <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Hi </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 开始解析 process.argv 并执行相应命令</span>\ncli<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>执行 <code>./cli.js</code> 试试:</p>\n<p><img src=\"https://i.loli.net/2017/10/18/59e76be370455.png\" alt=\"cac\"></p>\n<p>如你所见，这里只会在执行 <code>hi</code> 命令之后才会打招呼。</p>\n<p>同时添加 <code>--help</code> flag 会打印出帮助信息:</p>\n<p><img src=\"https://ooo.0o0.ooo/2017/10/18/59e76f8c2d27a.png\" alt=\"help\"></p>\n<h2 id=\"配置-package-json\"><a class=\"header-anchor\" href=\"#配置-package-json\" aria-hidden=\"true\">#</a> 配置 package.json</h2>\n<p>要想让你的程序的可执行文件全局可用，你需要将其加入到系统 <code>PATH</code> 中，而 npm 简化了这一步骤:</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my-cli\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"bin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./cli.js\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在本地测试时执行 <code>npm link</code> 或者 <code>npm i -g .</code> 系统便有了 <code>my-cli</code> 命令。</p>\n<p>这里通过配置 <a href=\"https://docs.npmjs.com/files/package.json#bin\" target=\"_blank\" rel=\"noopener noreferrer\">bin<OutboundLink/></a> 让 npm 在安装程序的时候在 <code>{prefix}/bin</code> 目录创建一个<a href=\"https://zh.wikipedia.org/zh-hans/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5\" target=\"_blank\" rel=\"noopener noreferrer\">符号链接<OutboundLink/></a>指向 <code>./cli.js</code> 的绝对路径。在不同的情况下这个 <code>prefix</code> 不同:</p>\n<ul>\n<li>全局安装的模块(即 <code>npm install -g</code>)的 <code>prefix</code> 是执行 <code>npm prefix -g</code> 得到的路径。</li>\n<li>否则将是当前目录里的 <code>./node_modules/.bin</code>。</li>\n</ul>\n<p>[^1]: 这里的命令指程序中的命令，比如 <code>git</code> 程序中有个命令叫 <code>log</code>，你可以通过执行 <code>git log</code> 使用。</p>\n</div>\n</template>\n<script>export default { props: ['target'] }</script>","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('p',[_vm._v(\"你可能已经知道，在终端里可以调用不同的解释器来执行你的程序，比如:\")]),_vm._v(\" \"),_vm._m(0),_vm._m(1),_vm._v(\" \"),_vm._m(2),_vm._m(3),_vm._v(\" \"),_vm._m(4),_vm._v(\" \"),_vm._m(5),_vm._m(6),_vm._v(\" \"),_vm._m(7),_vm._v(\" \"),_vm._m(8),_vm._v(\" \"),_vm._m(9),_vm._v(\" \"),_vm._m(10),_vm._v(\" \"),_vm._m(11),_c('p',[_vm._v(\"然后在终端可以看到期望的结果:\")]),_vm._v(\" \"),_vm._m(12),_vm._v(\" \"),_vm._m(13),_vm._v(\" \"),_c('hr'),_vm._v(\" \"),_c('p',[_vm._v(\"正如浏览器里的 URL 有相应的各种路由解析库一样，将 \"),_c('code',[_vm._v(\"/user/egoist\")]),_vm._v(\" 解析成 \"),_c('code',[_vm._v(\"{ username: 'egoist' }\")]),_vm._v(\" 之类的，命令行参数当然也有，\"),_c('a',{attrs:{\"href\":\"https://github.com/substack/minimist\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"minimist\"),_c('OutboundLink')],1),_vm._v(\" 便是 node.js 社区里应用最多的一个:\")]),_vm._v(\" \"),_vm._m(14),_c('p',[_vm._v(\"使用不同的命令执行一下这段代码试试:\")]),_vm._v(\" \"),_vm._m(15),_vm._v(\" \"),_vm._m(16),_vm._v(\" \"),_vm._m(17),_vm._v(\" \"),_vm._m(18),_vm._v(\" \"),_vm._m(19),_vm._v(\" \"),_c('p',[_vm._v(\"类似 web 开发，你当然可以完全从头写你的命令行程序，自己实现一个命令行参数解释器，然后自行判断如何根据参数返回结果。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"不过这有点浪费时间且本末倒置，如果你就是想学习那些方面的内容，你可以那样干，否则如果你只是想为你的一个奇思妙实现一个命令行工具，那就有点得不偿失，不如直接使用现成的框架来加速达成你原本的目标。\")]),_vm._v(\" \"),_vm._m(20),_vm._v(\" \"),_vm._m(21),_vm._v(\" \"),_c('p',[_vm._v(\"在这里我就不过多介绍框架了，毕竟只要了解原理就能举一反三，不过我还是推荐几个常用的，节省读者的时间:\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/sindresorhus/meow\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"Meow\"),_c('OutboundLink')],1),_vm._v(\": 简单的基于 \"),_c('a',{attrs:{\"href\":\"https://github.com/substack/minimist\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"minimist\"),_c('OutboundLink')],1),_vm._v(\" 的包装，没什么新功能。\")]),_vm._v(\" \"),_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/tj/commander.js\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"Commander.js\"),_c('OutboundLink')],1),_vm._v(\": 功能齐全的框架，提供类似 git 的子命令系统，自动生成帮助信息等。\")]),_vm._v(\" \"),_c('li',[_c('strong',[_c('a',{attrs:{\"href\":\"https://github.com/egoist/cac\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"CAC\"),_c('OutboundLink')],1),_vm._v(\": 类似 Commander.js 但更轻巧、现代，支持插件。(我做的)\")])]),_vm._v(\" \"),_c('li',[_c('a',{attrs:{\"href\":\"http://yargs.js.org/\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"Yargs\"),_c('OutboundLink')],1),_vm._v(\": 功能强大的框架，但显得过于臃肿。\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"这里用 CAC 举个简单的例子，介绍一下如何使用:\")]),_vm._v(\" \"),_vm._m(22),_vm._m(23),_vm._v(\" \"),_vm._m(24),_vm._v(\" \"),_vm._m(25),_vm._v(\" \"),_vm._m(26),_vm._v(\" \"),_vm._m(27),_vm._v(\" \"),_vm._m(28),_vm._v(\" \"),_vm._m(29),_vm._v(\" \"),_vm._m(30),_vm._m(31),_vm._v(\" \"),_c('p',[_vm._v(\"这里通过配置 \"),_c('a',{attrs:{\"href\":\"https://docs.npmjs.com/files/package.json#bin\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"bin\"),_c('OutboundLink')],1),_vm._v(\" 让 npm 在安装程序的时候在 \"),_c('code',[_vm._v(\"{prefix}/bin\")]),_vm._v(\" 目录创建一个\"),_c('a',{attrs:{\"href\":\"https://zh.wikipedia.org/zh-hans/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"符号链接\"),_c('OutboundLink')],1),_vm._v(\"指向 \"),_c('code',[_vm._v(\"./cli.js\")]),_vm._v(\" 的绝对路径。在不同的情况下这个 \"),_c('code',[_vm._v(\"prefix\")]),_vm._v(\" 不同:\")]),_vm._v(\" \"),_vm._m(32),_vm._v(\" \"),_vm._m(33)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 执行一段 shell 脚本\")]),_vm._v(\"\\nsh ./foo.sh\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"# 执行一段 node.js 代码\")]),_vm._v(\"\\nnode ./bar.js\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"下一步你想做的可能是省略解释器，直接通过运行 \"),_c('code',[_vm._v(\"./foo.sh\")]),_vm._v(\" 或者 \"),_c('code',[_vm._v(\"./bar.js\")]),_vm._v(\" 来执行你的程序。想在命令行输入命令时省略解释器，你可以将它写入实际运行的程序中，比如 \"),_c('code',[_vm._v(\"./bar.js\")]),_vm._v(\":\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_vm._v(\"#\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"!\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"/\")]),_vm._v(\"usr\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"/\")]),_vm._v(\"bin\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"/\")]),_vm._v(\"env node\\nconsole\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"log\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'bar'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"这段程序第一行由两部分组成，即 \"),_c('strong',[_vm._v(\"Shebang\")]),_vm._v(\" 和 \"),_c('strong',[_vm._v(\"解释器命令\")]),_vm._v(\"。\"),_c('strong',[_vm._v(\"Shebang\")]),_vm._v(\" 就是开头的 \"),_c('code',[_vm._v(\"#!\")]),_vm._v(\"，它告诉系统调用后面声明的解释器，而我们需要调用的解释器是 \"),_c('code',[_vm._v(\"node\")]),_vm._v(\"，执行 \"),_c('code',[_vm._v(\"/usr/bin/env node\")]),_vm._v(\" 可以寻找到系统 \"),_c('code',[_vm._v(\"$PATH\")]),_vm._v(\" 里第一个出现的 \"),_c('code',[_vm._v(\"node\")]),_vm._v(\" 命令。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"这样你便可以通过执行 \"),_c('code',[_vm._v(\"./bar.js\")]),_vm._v(\" 来执行这段程序了:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-bash extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-bash\"}},[_c('code',[_vm._v(\"❯ \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"chmod\")]),_vm._v(\" +x bar.js\\n❯ ./bar.js\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"第一行的 \"),_c('code',[_vm._v(\"chmod +x bar.js\")]),_vm._v(\" 是让系统允许将文件 \"),_c('code',[_vm._v(\"bar.js\")]),_vm._v(\" 直接作为一段程序运行。现在你可以成功看到期望的输出:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2017/10/18/59e724560f339.png\",\"alt\":\"bar\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"命令行参数\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#命令行参数\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 命令行参数\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在网页应用里，我们依靠 \"),_c('em',[_vm._v(\"URL\")]),_vm._v(\" 来获得展现页面内容所需要的参数，比如依靠路径 \"),_c('code',[_vm._v(\"/user/egoist\")]),_vm._v(\" 来获取数据并渲染用户 \"),_c('code',[_vm._v(\"egoist\")]),_vm._v(\" 的页面。而命令行程序所依靠的便是命令行参数。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"以刚才的 \"),_c('code',[_vm._v(\"bar.js\")]),_vm._v(\" 为例，假设你需要将 \"),_c('code',[_vm._v(\"bar\")]),_vm._v(\" 字符串重复 n 次输出，而 n 是用户决定的，你会这样做:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_vm._v(\"#\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"!\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"/\")]),_vm._v(\"usr\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"/\")]),_vm._v(\"bin\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"/\")]),_vm._v(\"env node\\n\"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"const\")]),_vm._v(\" times \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" process\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_vm._v(\"argv\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_c('span',{attrs:{\"class\":\"token number\"}},[_vm._v(\"2\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"||\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token number\"}},[_vm._v(\"1\")]),_vm._v(\"\\nconsole\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"log\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'bar'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"repeat\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"times\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://ooo.0o0.ooo/2017/10/18/59e72774a1ce7.png\",\"alt\":\"process.argv\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('code',[_vm._v(\"process.argv\")]),_vm._v(\" 是实际执行的命令参数列表(数组)，比如运行 \"),_c('code',[_vm._v(\"./bar 4\")]),_vm._v(\" 实际执行的是 \"),_c('code',[_vm._v(\"node ./bar 4\")]),_vm._v(\"，第一个参数是解释器命令 \"),_c('code',[_vm._v(\"node\")]),_vm._v(\"，第二个是被执行的程序路径。而我们这里只需要第三个参数。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"const\")]),_vm._v(\" minimist \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"require\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'minimist'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 大多数情况我们不需要关心 process.argv 的前两项\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"const\")]),_vm._v(\" argv \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"minimist\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"process\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_vm._v(\"argv\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"slice\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token number\"}},[_vm._v(\"2\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\nconsole\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"log\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"argv\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2017/10/18/59e72c19cea1f.png\",\"alt\":\"minimist\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"之后你便可以灵活地通过 \"),_c('code',[_vm._v(\"argv\")]),_vm._v(\" 来判断如何输出用户期望的内容了。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('strong',[_vm._v(\"命令行参数小贴士\")]),_vm._v(\":\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"形如 \"),_c('code',[_vm._v(\"--foo\")]),_vm._v(\" 的叫做 \"),_c('code',[_vm._v(\"switch\")]),_vm._v(\"，也就是代表了一个布尔值 \"),_c('code',[_vm._v(\"foo: true\")]),_vm._v(\"，后面不加任何值。\\n\"),_c('ul',[_c('li',[_vm._v(\"一般用 \"),_c('code',[_vm._v(\"--no-foo\")]),_vm._v(\" 来表示布尔值 \"),_c('code',[_vm._v(\"foo: false\")]),_vm._v(\"。\")])])]),_vm._v(\" \"),_c('li',[_vm._v(\"形如 \"),_c('code',[_vm._v(\"--name egoist\")]),_vm._v(\" 的叫做 \"),_c('code',[_vm._v(\"flag\")]),_vm._v(\", 即后面要加值，比如字符串和数字。\\n\"),_c('ul',[_c('li',[_vm._v(\"类似的写法是 \"),_c('code',[_vm._v(\"--name=egoist\")]),_vm._v(\"，用 \"),_c('code',[_vm._v(\"=\")]),_vm._v(\" 而不是空格来连接。\")])])]),_vm._v(\" \"),_c('li',[_vm._v(\"只有一个连字符的一般用于其它 flag 的简写，比如用 \"),_c('code',[_vm._v(\"-f\")]),_vm._v(\" 作为 \"),_c('code',[_vm._v(\"--foo\")]),_vm._v(\" 的简写，使用这两个之中任何一个的效果相同。连字符后面一般是单个字符，而一个连字符加多个字符其实相当于合并了多个简写，比如 \"),_c('code',[_vm._v(\"-xFd\")]),_vm._v(\" 相当于 \"),_c('code',[_vm._v(\"-x -F -d\")]),_vm._v(\"。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"某些命令行参数解释器支持用英文小数点 \"),_c('code',[_vm._v(\".\")]),_vm._v(\" 连接的参数，比如: \"),_c('code',[_vm._v(\"--foo.bar baz\")]),_vm._v(\"，解析之后对象 \"),_c('code',[_vm._v(\"foo\")]),_vm._v(\" 的属性 \"),_c('code',[_vm._v(\"bar\")]),_vm._v(\" 的值就是 \"),_c('code',[_vm._v(\"baz\")]),_vm._v(\"。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"命令行程序框架\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#命令行程序框架\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 命令行程序框架\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h3',{attrs:{\"id\":\"框架干了哪些事\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#框架干了哪些事\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 框架干了哪些事\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"根据不同的命令[^1]调用不同的模块。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"自动生成帮助信息，比如执行 \"),_c('code',[_vm._v(\"git --help\")]),_vm._v(\" 显示的内容。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"让整个程序更安全，比如指定 flag 哪些是必需的。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"自动命令补全。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 假设把它放在 cli.js 里\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"const\")]),_vm._v(\" cli \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"require\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'cac'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 定义一个命令\")]),_vm._v(\"\\ncli\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"command\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'hi'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'打招呼'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" input \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=>\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n  console\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"log\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token template-string\"}},[_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"`Hi \")]),_c('span',{attrs:{\"class\":\"token interpolation\"}},[_c('span',{attrs:{\"class\":\"token interpolation-punctuation punctuation\"}},[_vm._v(\"${\")]),_vm._v(\"input\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_c('span',{attrs:{\"class\":\"token number\"}},[_vm._v(\"0\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_c('span',{attrs:{\"class\":\"token interpolation-punctuation punctuation\"}},[_vm._v(\"}\")])]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"`\")])]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 开始解析 process.argv 并执行相应命令\")]),_vm._v(\"\\ncli\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"parse\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"执行 \"),_c('code',[_vm._v(\"./cli.js\")]),_vm._v(\" 试试:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2017/10/18/59e76be370455.png\",\"alt\":\"cac\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"如你所见，这里只会在执行 \"),_c('code',[_vm._v(\"hi\")]),_vm._v(\" 命令之后才会打招呼。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"同时添加 \"),_c('code',[_vm._v(\"--help\")]),_vm._v(\" flag 会打印出帮助信息:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://ooo.0o0.ooo/2017/10/18/59e76f8c2d27a.png\",\"alt\":\"help\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"配置-package-json\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#配置-package-json\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 配置 package.json\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"要想让你的程序的可执行文件全局可用，你需要将其加入到系统 \"),_c('code',[_vm._v(\"PATH\")]),_vm._v(\" 中，而 npm 简化了这一步骤:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-json extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-json\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"name\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"my-cli\\\"\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"bin\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"./cli.js\\\"\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在本地测试时执行 \"),_c('code',[_vm._v(\"npm link\")]),_vm._v(\" 或者 \"),_c('code',[_vm._v(\"npm i -g .\")]),_vm._v(\" 系统便有了 \"),_c('code',[_vm._v(\"my-cli\")]),_vm._v(\" 命令。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"全局安装的模块(即 \"),_c('code',[_vm._v(\"npm install -g\")]),_vm._v(\")的 \"),_c('code',[_vm._v(\"prefix\")]),_vm._v(\" 是执行 \"),_c('code',[_vm._v(\"npm prefix -g\")]),_vm._v(\" 得到的路径。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"否则将是当前目录里的 \"),_c('code',[_vm._v(\"./node_modules/.bin\")]),_vm._v(\"。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"[^1]: 这里的命令指程序中的命令，比如 \"),_c('code',[_vm._v(\"git\")]),_vm._v(\" 程序中有个命令叫 \"),_c('code',[_vm._v(\"log\")]),_vm._v(\"，你可以通过执行 \"),_c('code',[_vm._v(\"git log\")]),_vm._v(\" 使用。\")])}]\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./how-does-nodejs-cli-program-work.md?vue&type=template&id=fdd155e2&\"\nimport script from \"./how-does-nodejs-cli-program-work.md?vue&type=script&lang=js&\"\nexport * from \"./how-does-nodejs-cli-program-work.md?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--3-0!../../../../node_modules/babel-loader/lib/index.js??ref--3-1!../../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../@vuepress/core/lib/webpack/markdownLoader.js??ref--1-2!./how-does-nodejs-cli-program-work.md?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--3-0!../../../../node_modules/babel-loader/lib/index.js??ref--3-1!../../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../@vuepress/core/lib/webpack/markdownLoader.js??ref--1-2!./how-does-nodejs-cli-program-work.md?vue&type=script&lang=js&\""],"sourceRoot":""}