{"version":3,"sources":["webpack:///source/_posts/tesing-javascript-apps-using-jest.md","webpack:///./source/_posts/tesing-javascript-apps-using-jest.md?d030","webpack:///./source/_posts/tesing-javascript-apps-using-jest.md","webpack:///./source/_posts/tesing-javascript-apps-using-jest.md?37c9"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkGA;AAAA;AAAA,G;;;;;;;;;;;;;;AClGA;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,iBAAiB,sBAAsB,oRAAoR,aAAa,wBAAwB,+MAA+M,OAAO,4HAA4H,uqBAAuqB,OAAO,0IAA0I,mKAAmK,OAAO,gGAAgG,gRAAgR,OAAO,wFAAwF,4IAA4I,OAAO,yIAAyI,wKAAwK,OAAO,uKAAuK,0TAA0T,OAAO,8HAA8H;AAC7uG,oCAAoC,aAAa,0BAA0B,wBAAwB,8EAA8E,cAAc,aAAa,0BAA0B,wBAAwB,iBAAiB,sCAAsC,YAAY,gBAAgB,uBAAuB,wBAAwB,OAAO,yBAAyB,4CAA4C,OAAO,yBAAyB,6CAA6C,OAAO,6BAA6B,uCAAuC,OAAO,6BAA6B,wCAAwC,OAAO,6BAA6B,uCAAuC,OAAO,0BAA0B,0CAA0C,OAAO,0BAA0B,qCAAqC,cAAc,aAAa,0BAA0B,wBAAwB,2FAA2F,cAAc,aAAa,0BAA0B,wBAAwB,iBAAiB,sCAAsC,YAAY,gBAAgB,uBAAuB,wBAAwB,OAAO,yBAAyB,gDAAgD,OAAO,yBAAyB,0CAA0C,OAAO,wBAAwB,gDAAgD,OAAO,0BAA0B,8BAA8B,OAAO,6BAA6B,2BAA2B,OAAO,wBAAwB,+BAA+B,OAAO,6BAA6B,uCAAuC,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,uCAAuC,OAAO,0BAA0B,wCAAwC,OAAO,6BAA6B,WAAW,+BAA+B,OAAO,0BAA0B,gCAAgC,OAAO,6BAA6B,2BAA2B,OAAO,0BAA0B,6BAA6B,OAAO,6BAA6B,2BAA2B,OAAO,wBAAwB,2BAA2B,OAAO,6BAA6B,uCAAuC,OAAO,wBAAwB,2BAA2B,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,2BAA2B,OAAO,0BAA0B,8BAA8B,OAAO,6BAA6B,2BAA2B,OAAO,wBAAwB,2BAA2B,OAAO,6BAA6B,wCAAwC,OAAO,6BAA6B,WAAW,gBAAgB,OAAO,6BAA6B,mCAAmC,cAAc,aAAa,0BAA0B,wBAAwB,8FAA8F,cAAc,aAAa,0BAA0B,wBAAwB,qGAAqG,cAAc,aAAa,0BAA0B,wBAAwB,yBAAyB,OAAO,sEAAsE,IAAI,cAAc,aAAa,0BAA0B,wBAAwB,wQAAwQ,cAAc,aAAa,0BAA0B,wBAAwB,+UAA+U,cAAc,aAAa,0BAA0B,wBAAwB,iBAAiB,wCAAwC,YAAY,gBAAgB,yBAAyB,wBAAwB,OAAO,6BAA6B,WAAW,+BAA+B,OAAO,0BAA0B,qCAAqC,OAAO,0BAA0B,uCAAuC,OAAO,6BAA6B,2BAA2B,OAAO,wBAAwB,iCAAiC,OAAO,6BAA6B,wCAAwC,OAAO,6BAA6B,WAAW,wBAAwB,cAAc,aAAa,0BAA0B,wBAAwB,yBAAyB,OAAO,wEAAwE,IAAI,cAAc,aAAa,0BAA0B,wBAAwB,sOAAsO,cAAc,aAAa,0BAA0B,wBAAwB,gBAAgB,OAAO,aAAa,UAAU,mCAAmC,qCAAqC,kCAAkC,cAAc,aAAa,0BAA0B,wBAAwB,iBAAiB,sCAAsC,YAAY,gBAAgB,uBAAuB,wBAAwB,OAAO,yBAAyB,4CAA4C,OAAO,wBAAwB,+CAA+C,cAAc,aAAa,0BAA0B,wBAAwB,wHAAwH,cAAc,aAAa,0BAA0B,wBAAwB,sEAAsE,cAAc,aAAa,0BAA0B,wBAAwB,iBAAiB,wCAAwC,YAAY,gBAAgB,yBAAyB,wBAAwB,OAAO,6BAA6B,WAAW,+BAA+B,OAAO,0BAA0B,kCAAkC,OAAO,0BAA0B,uCAAuC,OAAO,6BAA6B,WAAW,iCAAiC,OAAO,0BAA0B,uCAAuC,OAAO,0BAA0B,uCAAuC,OAAO,6BAA6B,WAAW,mCAAmC,OAAO,0BAA0B,+CAA+C,OAAO,0BAA0B,uCAAuC,OAAO,wBAAwB,wCAAwC,OAAO,6BAA6B,8CAA8C,OAAO,0BAA0B,0CAA0C,OAAO,0BAA0B,uCAAuC,OAAO,wBAAwB,8EAA8E,OAAO,6BAA6B,WAAW,+BAA+B,OAAO,6BAA6B,WAAW,6BAA6B,OAAO,6BAA6B,WAAW,wBAAwB,cAAc,aAAa,0BAA0B,wBAAwB,qBAAqB,aAAa,wBAAwB,0QAA0Q,cAAc,aAAa,0BAA0B,wBAAwB,+EAA+E,cAAc,aAAa,0BAA0B,wBAAwB,iBAAiB,sCAAsC,YAAY,gBAAgB,uBAAuB,wBAAwB,OAAO,yBAAyB,8DAA8D,OAAO,yBAAyB,gEAAgE,OAAO,6BAA6B,8CAA8C,OAAO,0BAA0B,uCAAuC,OAAO,6BAA6B,WAAW,+BAA+B,OAAO,0BAA0B,iCAAiC,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,uCAAuC,OAAO,6BAA6B,WAAW,iCAAiC,OAAO,yBAAyB,4CAA4C,OAAO,wBAAwB,+BAA+B,gCAAgC,OAAO,6BAA6B,WAAW,gBAAgB,OAAO,6BAA6B,0CAA0C,OAAO,0BAA0B,qCAAqC,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,uCAAuC,OAAO,6BAA6B,WAAW,iCAAiC,OAAO,yBAAyB,4EAA4E,OAAO,yBAAyB,4CAA4C,OAAO,wBAAwB,oDAAoD,OAAO,6BAA6B,WAAW,6BAA6B,OAAO,6BAA6B,WAAW,wBAAwB,cAAc,aAAa,0BAA0B,wBAAwB,4LAA4L,cAAc,aAAa,0BAA0B,wBAAwB,gBAAgB,OAAO,gBAAgB,UAAU,mCAAmC,wCAAwC,qCAAqC,cAAc,aAAa,0BAA0B,wBAAwB,gBAAgB,OAAO,oBAAoB,UAAU,mCAAmC,4CAA4C,yCAAyC,cAAc,aAAa,0BAA0B,wBAAwB,iBAAiB,sCAAsC,YAAY,gBAAgB,uBAAuB,wBAAwB,OAAO,yBAAyB,kDAAkD,OAAO,yBAAyB,0CAA0C,OAAO,wBAAwB,8CAA8C,OAAO,yBAAyB,iDAAiD,OAAO,yBAAyB,0CAA0C,OAAO,wBAAwB,sDAAsD,OAAO,yBAAyB,qDAAqD,OAAO,yBAAyB,0CAA0C,OAAO,wBAAwB,8DAA8D,OAAO,0BAA0B,4BAA4B,OAAO,6BAA6B,2BAA2B,OAAO,wBAAwB,6CAA6C,OAAO,6BAA6B,uCAAuC,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,uCAAuC,OAAO,0BAA0B,wCAAwC,OAAO,6BAA6B,WAAW,+BAA+B,OAAO,yBAAyB,gDAAgD,OAAO,0BAA0B,qDAAqD,OAAO,6BAA6B,2BAA2B,OAAO,0BAA0B,gCAAgC,OAAO,6BAA6B,2BAA2B,OAAO,0BAA0B,+CAA+C,OAAO,0BAA0B,2BAA2B,OAAO,wBAAwB,qDAAqD,OAAO,0BAA0B,8CAA8C,OAAO,0BAA0B,2BAA2B,OAAO,0BAA0B,0CAA0C,OAAO,0BAA0B,2BAA2B,OAAO,6BAA6B,4CAA4C,OAAO,6BAA6B,2BAA2B,OAAO,0BAA0B,gCAAgC,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,0CAA0C,OAAO,0BAA0B,gCAAgC,OAAO,6BAA6B,0CAA0C,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,2BAA2B,OAAO,0BAA0B,yCAAyC,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,wCAAwC,OAAO,6BAA6B,WAAW,gBAAgB,OAAO,6BAA6B,mCAAmC,cAAc,aAAa,0BAA0B,wBAAwB,sIAAsI,cAAc,aAAa,0BAA0B,wBAAwB,0MAA0M,cAAc,aAAa,0BAA0B,wBAAwB,iBAAiB,sCAAsC,YAAY,gBAAgB,uBAAuB,wBAAwB,OAAO,yBAAyB,2DAA2D,OAAO,yBAAyB,0CAA0C,OAAO,wBAAwB,+DAA+D,OAAO,0BAA0B,8BAA8B,OAAO,6BAA6B,2BAA2B,OAAO,wBAAwB,4CAA4C,OAAO,6BAA6B,uCAAuC,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,uCAAuC,OAAO,0BAA0B,wCAAwC,OAAO,6BAA6B,WAAW,+BAA+B,OAAO,yBAAyB,gDAAgD,OAAO,0BAA0B,uCAAuC,OAAO,0BAA0B,wCAAwC,OAAO,6BAA6B,2BAA2B,OAAO,wBAAwB,2CAA2C,OAAO,6BAA6B,0CAA0C,OAAO,0BAA0B,gCAAgC,OAAO,6BAA6B,0CAA0C,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,2BAA2B,OAAO,0BAA0B,yCAAyC,OAAO,6BAA6B,2BAA2B,OAAO,6BAA6B,wCAAwC,OAAO,6BAA6B,WAAW,gBAAgB,OAAO,6BAA6B,mCAAmC,cAAc,aAAa,0BAA0B,wBAAwB,gBAAgB,OAAO,eAAe,UAAU,mCAAmC,uCAAuC,oCAAoC,cAAc,aAAa,0BAA0B,wBAAwB,2IAA2I;;;;;;;;;;;;;;;;;;ACDzqiB;AAClC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gF;;;;;;;;;;;;;;wCClBwU,sWAAoB,C","file":"assets/js/46.70c10097.js","sourcesContent":["<template>\n<div class=\"content\"><p>Jest 是 FaceBook 用来测试 JavaScript 应用的一套测试框架，这些应用当然也包括了 React 应用。它的优点之一是自带了对 React 的支持，同时也很容易支持其它框架。</p>\n<p>从最简单的开始，我们可以看看如何用 Jest 测试纯 JS 项目。</p>\n<p>假设你需要测试 <code>sum.js</code>:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>你只需要对应地新建一个 <code>sum.test.js</code>[^1]:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> sum <span class=\"token keyword\">from</span> <span class=\"token string\">'./sum'</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><details style=\"margin-bottom: 30px\">\n<summary>\n<p>关于这里的 <code>expect</code> 语法</p>\n</summary>\n<p>这里的 <code>expect</code> <code>toBe</code> 是 Jest 默认使用的断言语法，也就是用来比较 <code>值</code> 的 API，详见<a href=\"https://facebook.github.io/jest/docs/en/using-matchers.html#content\" target=\"_blank\" rel=\"noopener noreferrer\">相关文档<OutboundLink/></a>。</p>\n</details>\n<p>然后在终端运行 <code>jest</code> 命令的时候就会自动找到这个文件，执行这里面的测试:</p>\n<p><img src=\"https://i.loli.net/2017/11/26/5a1a6a9148ca3.png\" alt=\"jest\"></p>\n<p>额，报错了，原来 Jest 默认只支持你所使用的 node.js 版本所支持的 JS 特性，例如 <code>import</code> <code>export</code> 就不支持，所以要么你的代码使用系统 node.js 兼容的语法写 (也就是使用 <code>require</code>)，要么在这里使用 Babel 转义一下。</p>\n<p>在 Jest 中使用 Babel 很简单，只需要安装 <code>babel-jest</code> 并新建一个 <code>.babelrc</code> 加入你想要的配置就行了，Jest 会自动使用 <code>babel-jest</code>。这里我们简单地使用 <code>babel-preset-env</code> 即可，对应的 <code>.babelrc</code> 是:</p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"env\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>然后重新运行 jest 测试便通过了:</p>\n<p><img src=\"https://i.loli.net/2017/11/26/5a1a6c085ba32.png\" alt=\"jest 2\"></p>\n<p>对于 React 应用，基本和纯 JS 项目类似，不过你需要在 <code>.babelrc</code> 中配置对 <code>JSX</code> 的支持，在大多数时候你的项目本身就已经在使用 <code>.babelrc</code> 了，所以这一步甚至也省略掉了。</p>\n<h2 id=\"资源文件\"><a class=\"header-anchor\" href=\"#资源文件\" aria-hidden=\"true\">#</a> 资源文件</h2>\n<p>当你要测试的代码引用了非 JS 文件时，Jest 就不知道如何使用这些文件了，例如你的 Webpack 项目中的一个文件:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> <span class=\"token string\">'./style.css'</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>正如你需要在 Webpack 中配置了 <code>css-loader</code> 一样，你也需告诉 Jest 如何处理 CSS 文件。</p>\n<p>📝 <strong>package.json:</strong></p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"jest\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"transform\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"^.+\\\\.(js|jsx)$\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel-jest\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"^.+\\\\.css$\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;rootDir>/jest/css-transform.js\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><details style=\"margin-bottom: 30px\">\n<summary>\n<p>关于 babel-jest</p>\n</summary>\n<p>当你手动在 <code>package.json</code> 里设置了 <code>jest.transform</code> 时 <code>babel-jest</code> 不再会被自动使用了，我们需要在这里手动配置。</p>\n</details>\n<p>对应的 <code>./jest/css-transform.js</code></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 大多数测试并不关心 CSS 文件里的内容</span>\n<span class=\"token comment\">// 所以这里我们直接返回一个空的对象</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'module.exports = {};'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getCacheKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The output is always the same.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'css-cache'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>类似地，你可以使用 <code>transform</code> 来设定如何处理其它类型的文件，比如 <code>.vue</code>[^2] <code>.svg</code> 文件。</p>\n<p>[^1]: Jest 默认使用 <code>[ '**/__tests__/**/*.js?(x)', '**/?(*.)(spec|test).js?(x)' ]</code> 这些测试文件，当然这是<a href=\"https://facebook.github.io/jest/docs/en/configuration.html#testmatch-array-string\" target=\"_blank\" rel=\"noopener noreferrer\">可配置<OutboundLink/></a>的。\n[^2]: <code>.vue</code> 的 <code>transform</code> 可以使用社区的 <a href=\"https://github.com/eddyerburgh/vue-jest\" target=\"_blank\" rel=\"noopener noreferrer\">jest-vue<OutboundLink/></a>。</p>\n<h2 id=\"浏览器-api\"><a class=\"header-anchor\" href=\"#浏览器-api\" aria-hidden=\"true\">#</a> 浏览器 API</h2>\n<p>假设你要测试的是一个 Web 应用，依赖于一些浏览器 API 比如 <code>window</code> <code>document</code>，它在 Jest 中同样可以正常运行，因为 Jest 默认使用了 <a href=\"https://github.com/tmpvar/jsdom\" target=\"_blank\" rel=\"noopener noreferrer\">js-dom<OutboundLink/></a> 来模拟浏览器环境，不需要浏览器环境时可以通过使用命令行参数 <code>--env node</code> 或者<a href=\"http://facebook.github.io/jest/docs/en/configuration.html#testenvironment-string\" target=\"_blank\" rel=\"noopener noreferrer\">配置文件<OutboundLink/></a>来禁用。</p>\n<h2 id=\"snapshot-测试\"><a class=\"header-anchor\" href=\"#snapshot-测试\" aria-hidden=\"true\">#</a> Snapshot 测试</h2>\n<p>当你期望某个值不会改变的时候，可以使用 snapshot 测试。简单地说，它就是记录这个值的状态到<a href=\"https://github.com/facebook/jest/blob/master/examples/snapshot/__tests__/__snapshots__/link.react.test.js.snap\" target=\"_blank\" rel=\"noopener noreferrer\">本地自动生成的 snapshot 文件<OutboundLink/></a>里，然后在下一次测试中用新的值来和其进行对比。这对 UI 之类的测试很有帮助:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> Link <span class=\"token keyword\">from</span> <span class=\"token string\">'../Link.react'</span>\n<span class=\"token keyword\">import</span> renderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'renders correctly'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> renderer\n    <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Link page<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.facebook.com\"</span><span class=\"token operator\">></span>Facebook<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这确保了 <code>&lt;Link page=&quot;http://www.facebook.com&quot;&gt;Facebook&lt;/Link&gt;</code> 渲染出的内容不会出错。</p>\n<p>当你更改了 <code>&lt;Link&gt;</code> 组件的逻辑，需要更新 snapshot 文件时，可以加上 <code>--updateSnapshot</code> 或者 <code>-u</code> 来更新。</p>\n<p>类似的，Snapshot 测试不止于 UI 测试中，假设你写了个 Markdown 解析器，你可以用它来确保解析出的内容不会改变:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> renderMarkdown <span class=\"token keyword\">from</span> <span class=\"token string\">'./my-markdown-parser'</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'render correctly'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token function\">renderMarkdown</span><span class=\"token punctuation\">(</span><span class=\"token string\">'# markdown code'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>查看<a href=\"https://facebook.github.io/jest/docs/en/snapshot-testing.html#content\" target=\"_blank\" rel=\"noopener noreferrer\">相关文档<OutboundLink/></a>。</p>\n<h2 id=\"异步代码测试\"><a class=\"header-anchor\" href=\"#异步代码测试\" aria-hidden=\"true\">#</a> 异步代码测试</h2>\n<p>https://facebook.github.io/jest/docs/en/asynchronous.html#content</p>\n<p>我就懒得写了... 反正用 <code>Promise</code> 或者 <code>async/await</code> 就对了。</p>\n</div>\n</template>\n<script>export default { props: ['target'] }</script>","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('p',[_vm._v(\"Jest 是 FaceBook 用来测试 JavaScript 应用的一套测试框架，这些应用当然也包括了 React 应用。它的优点之一是自带了对 React 的支持，同时也很容易支持其它框架。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"从最简单的开始，我们可以看看如何用 Jest 测试纯 JS 项目。\")]),_vm._v(\" \"),_vm._m(0),_vm._v(\" \"),_vm._m(1),_vm._m(2),_vm._v(\" \"),_vm._m(3),_c('details',{staticStyle:{\"margin-bottom\":\"30px\"}},[_vm._m(4),_vm._v(\" \"),_c('p',[_vm._v(\"这里的 \"),_c('code',[_vm._v(\"expect\")]),_vm._v(\" \"),_c('code',[_vm._v(\"toBe\")]),_vm._v(\" 是 Jest 默认使用的断言语法，也就是用来比较 \"),_c('code',[_vm._v(\"值\")]),_vm._v(\" 的 API，详见\"),_c('a',{attrs:{\"href\":\"https://facebook.github.io/jest/docs/en/using-matchers.html#content\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"相关文档\"),_c('OutboundLink')],1),_vm._v(\"。\")])]),_vm._v(\" \"),_vm._m(5),_vm._v(\" \"),_vm._m(6),_vm._v(\" \"),_vm._m(7),_vm._v(\" \"),_vm._m(8),_vm._v(\" \"),_vm._m(9),_c('p',[_vm._v(\"然后重新运行 jest 测试便通过了:\")]),_vm._v(\" \"),_vm._m(10),_vm._v(\" \"),_vm._m(11),_vm._v(\" \"),_vm._m(12),_vm._v(\" \"),_c('p',[_vm._v(\"当你要测试的代码引用了非 JS 文件时，Jest 就不知道如何使用这些文件了，例如你的 Webpack 项目中的一个文件:\")]),_vm._v(\" \"),_vm._m(13),_vm._m(14),_vm._v(\" \"),_vm._m(15),_vm._v(\" \"),_vm._m(16),_vm._m(17),_vm._v(\" \"),_vm._m(18),_vm._v(\" \"),_vm._m(19),_vm._m(20),_vm._v(\" \"),_c('p',[_vm._v(\"[^1]: Jest 默认使用 \"),_c('code',[_vm._v(\"[ '**/__tests__/**/*.js?(x)', '**/?(*.)(spec|test).js?(x)' ]\")]),_vm._v(\" 这些测试文件，当然这是\"),_c('a',{attrs:{\"href\":\"https://facebook.github.io/jest/docs/en/configuration.html#testmatch-array-string\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"可配置\"),_c('OutboundLink')],1),_vm._v(\"的。\\n[^2]: \"),_c('code',[_vm._v(\".vue\")]),_vm._v(\" 的 \"),_c('code',[_vm._v(\"transform\")]),_vm._v(\" 可以使用社区的 \"),_c('a',{attrs:{\"href\":\"https://github.com/eddyerburgh/vue-jest\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"jest-vue\"),_c('OutboundLink')],1),_vm._v(\"。\")]),_vm._v(\" \"),_vm._m(21),_vm._v(\" \"),_c('p',[_vm._v(\"假设你要测试的是一个 Web 应用，依赖于一些浏览器 API 比如 \"),_c('code',[_vm._v(\"window\")]),_vm._v(\" \"),_c('code',[_vm._v(\"document\")]),_vm._v(\"，它在 Jest 中同样可以正常运行，因为 Jest 默认使用了 \"),_c('a',{attrs:{\"href\":\"https://github.com/tmpvar/jsdom\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"js-dom\"),_c('OutboundLink')],1),_vm._v(\" 来模拟浏览器环境，不需要浏览器环境时可以通过使用命令行参数 \"),_c('code',[_vm._v(\"--env node\")]),_vm._v(\" 或者\"),_c('a',{attrs:{\"href\":\"http://facebook.github.io/jest/docs/en/configuration.html#testenvironment-string\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"配置文件\"),_c('OutboundLink')],1),_vm._v(\"来禁用。\")]),_vm._v(\" \"),_vm._m(22),_vm._v(\" \"),_c('p',[_vm._v(\"当你期望某个值不会改变的时候，可以使用 snapshot 测试。简单地说，它就是记录这个值的状态到\"),_c('a',{attrs:{\"href\":\"https://github.com/facebook/jest/blob/master/examples/snapshot/__tests__/__snapshots__/link.react.test.js.snap\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"本地自动生成的 snapshot 文件\"),_c('OutboundLink')],1),_vm._v(\"里，然后在下一次测试中用新的值来和其进行对比。这对 UI 之类的测试很有帮助:\")]),_vm._v(\" \"),_vm._m(23),_vm._m(24),_vm._v(\" \"),_vm._m(25),_vm._v(\" \"),_c('p',[_vm._v(\"类似的，Snapshot 测试不止于 UI 测试中，假设你写了个 Markdown 解析器，你可以用它来确保解析出的内容不会改变:\")]),_vm._v(\" \"),_vm._m(26),_c('p',[_vm._v(\"查看\"),_c('a',{attrs:{\"href\":\"https://facebook.github.io/jest/docs/en/snapshot-testing.html#content\",\"target\":\"_blank\",\"rel\":\"noopener noreferrer\"}},[_vm._v(\"相关文档\"),_c('OutboundLink')],1),_vm._v(\"。\")]),_vm._v(\" \"),_vm._m(27),_vm._v(\" \"),_c('p',[_vm._v(\"https://facebook.github.io/jest/docs/en/asynchronous.html#content\")]),_vm._v(\" \"),_vm._m(28)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"假设你需要测试 \"),_c('code',[_vm._v(\"sum.js\")]),_vm._v(\":\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"export\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"default\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"a\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" b\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=>\")]),_vm._v(\" a \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"+\")]),_vm._v(\" b\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"你只需要对应地新建一个 \"),_c('code',[_vm._v(\"sum.test.js\")]),_vm._v(\"[^1]:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"import\")]),_vm._v(\" sum \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"from\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'./sum'\")]),_vm._v(\"\\n\\n\"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"test\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'sum'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=>\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"expect\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"sum\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token number\"}},[_vm._v(\"2\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token number\"}},[_vm._v(\"3\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"toBe\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token number\"}},[_vm._v(\"5\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('summary',[_c('p',[_vm._v(\"关于这里的 \"),_c('code',[_vm._v(\"expect\")]),_vm._v(\" 语法\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"然后在终端运行 \"),_c('code',[_vm._v(\"jest\")]),_vm._v(\" 命令的时候就会自动找到这个文件，执行这里面的测试:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2017/11/26/5a1a6a9148ca3.png\",\"alt\":\"jest\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"额，报错了，原来 Jest 默认只支持你所使用的 node.js 版本所支持的 JS 特性，例如 \"),_c('code',[_vm._v(\"import\")]),_vm._v(\" \"),_c('code',[_vm._v(\"export\")]),_vm._v(\" 就不支持，所以要么你的代码使用系统 node.js 兼容的语法写 (也就是使用 \"),_c('code',[_vm._v(\"require\")]),_vm._v(\")，要么在这里使用 Babel 转义一下。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"在 Jest 中使用 Babel 很简单，只需要安装 \"),_c('code',[_vm._v(\"babel-jest\")]),_vm._v(\" 并新建一个 \"),_c('code',[_vm._v(\".babelrc\")]),_vm._v(\" 加入你想要的配置就行了，Jest 会自动使用 \"),_c('code',[_vm._v(\"babel-jest\")]),_vm._v(\"。这里我们简单地使用 \"),_c('code',[_vm._v(\"babel-preset-env\")]),_vm._v(\" 即可，对应的 \"),_c('code',[_vm._v(\".babelrc\")]),_vm._v(\" 是:\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-json extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-json\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"presets\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"env\\\"\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('img',{attrs:{\"src\":\"https://i.loli.net/2017/11/26/5a1a6c085ba32.png\",\"alt\":\"jest 2\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"对于 React 应用，基本和纯 JS 项目类似，不过你需要在 \"),_c('code',[_vm._v(\".babelrc\")]),_vm._v(\" 中配置对 \"),_c('code',[_vm._v(\"JSX\")]),_vm._v(\" 的支持，在大多数时候你的项目本身就已经在使用 \"),_c('code',[_vm._v(\".babelrc\")]),_vm._v(\" 了，所以这一步甚至也省略掉了。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"资源文件\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#资源文件\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 资源文件\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"import\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'./style.css'\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"正如你需要在 Webpack 中配置了 \"),_c('code',[_vm._v(\"css-loader\")]),_vm._v(\" 一样，你也需告诉 Jest 如何处理 CSS 文件。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"📝 \"),_c('strong',[_vm._v(\"package.json:\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-json extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-json\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"jest\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"transform\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n      \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"^.+\\\\\\\\.(js|jsx)$\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"babel-jest\\\"\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"\\n      \"),_c('span',{attrs:{\"class\":\"token property\"}},[_vm._v(\"\\\"^.+\\\\\\\\.css$\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"<rootDir>/jest/css-transform.js\\\"\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('details',{staticStyle:{\"margin-bottom\":\"30px\"}},[_c('summary',[_c('p',[_vm._v(\"关于 babel-jest\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"当你手动在 \"),_c('code',[_vm._v(\"package.json\")]),_vm._v(\" 里设置了 \"),_c('code',[_vm._v(\"jest.transform\")]),_vm._v(\" 时 \"),_c('code',[_vm._v(\"babel-jest\")]),_vm._v(\" 不再会被自动使用了，我们需要在这里手动配置。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"对应的 \"),_c('code',[_vm._v(\"./jest/css-transform.js\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 大多数测试并不关心 CSS 文件里的内容\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// 所以这里我们直接返回一个空的对象\")]),_vm._v(\"\\nmodule\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_vm._v(\"exports \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"process\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"return\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'module.exports = {};'\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"getCacheKey\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token comment\"}},[_vm._v(\"// The output is always the same.\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"return\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'css-cache'\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"类似地，你可以使用 \"),_c('code',[_vm._v(\"transform\")]),_vm._v(\" 来设定如何处理其它类型的文件，比如 \"),_c('code',[_vm._v(\".vue\")]),_vm._v(\"[^2] \"),_c('code',[_vm._v(\".svg\")]),_vm._v(\" 文件。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"浏览器-api\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#浏览器-api\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 浏览器 API\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"snapshot-测试\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#snapshot-测试\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Snapshot 测试\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"import\")]),_vm._v(\" React \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"from\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'react'\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"import\")]),_vm._v(\" Link \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"from\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'../Link.react'\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"import\")]),_vm._v(\" renderer \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"from\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'react-test-renderer'\")]),_vm._v(\"\\n\\n\"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"it\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'renders correctly'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=>\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"const\")]),_vm._v(\" tree \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" renderer\\n    \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"create\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"<\")]),_vm._v(\"Link page\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"http://www.facebook.com\\\"\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\"Facebook\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"<\")]),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"/\")]),_vm._v(\"Link\"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n    \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"toJSON\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"expect\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"tree\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"toMatchSnapshot\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"这确保了 \"),_c('code',[_vm._v(\"<Link page=\\\"http://www.facebook.com\\\">Facebook</Link>\")]),_vm._v(\" 渲染出的内容不会出错。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"当你更改了 \"),_c('code',[_vm._v(\"<Link>\")]),_vm._v(\" 组件的逻辑，需要更新 snapshot 文件时，可以加上 \"),_c('code',[_vm._v(\"--updateSnapshot\")]),_vm._v(\" 或者 \"),_c('code',[_vm._v(\"-u\")]),_vm._v(\" 来更新。\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"language-js extra-class\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-js\"}},[_c('code',[_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"import\")]),_vm._v(\" renderMarkdown \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"from\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'./my-markdown-parser'\")]),_vm._v(\"\\n\\n\"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"test\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'render correctly'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=>\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token keyword\"}},[_vm._v(\"const\")]),_vm._v(\" html \"),_c('span',{attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"renderMarkdown\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token string\"}},[_vm._v(\"'# markdown code'\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n  \"),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"expect\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"html\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_c('span',{attrs:{\"class\":\"token function\"}},[_vm._v(\"toMatchSnapshot\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\"),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',{attrs:{\"id\":\"异步代码测试\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#异步代码测试\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 异步代码测试\")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\"我就懒得写了... 反正用 \"),_c('code',[_vm._v(\"Promise\")]),_vm._v(\" 或者 \"),_c('code',[_vm._v(\"async/await\")]),_vm._v(\" 就对了。\")])}]\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./tesing-javascript-apps-using-jest.md?vue&type=template&id=37ff4138&\"\nimport script from \"./tesing-javascript-apps-using-jest.md?vue&type=script&lang=js&\"\nexport * from \"./tesing-javascript-apps-using-jest.md?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--3-0!../../../../node_modules/babel-loader/lib/index.js??ref--3-1!../../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../@vuepress/core/lib/webpack/markdownLoader.js??ref--1-2!./tesing-javascript-apps-using-jest.md?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--3-0!../../../../node_modules/babel-loader/lib/index.js??ref--3-1!../../../../node_modules/vue-loader/lib/index.js??ref--1-1!../../../@vuepress/core/lib/webpack/markdownLoader.js??ref--1-2!./tesing-javascript-apps-using-jest.md?vue&type=script&lang=js&\""],"sourceRoot":""}